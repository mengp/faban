#!/usr/bin/perl

# Tunables

$debug = 0;
$CpuExp = 5;
$SysioExp = 5;
$AcExp = 4;
#$AcExp = 8; 4 for CH/CH+ , 8 for Jaguar
$SSMNodes = 4;
$MC_CAP = 8.33;
$MC_BDCAP = 11.9;

# Get options 

if ($#ARGV == -1) {&usage();}
$avgonly = $eavgonly = $verbose = 0;

while ($#ARGV > -1) {
	$arg = shift @ARGV;
	if ( $arg =~ /^-(.)(.*)$/ ) {
		$flag=$1; $val=$2;
		$flag2=$flag.$val;
		if ( $flag eq "i" ) {
			if ( $val eq "" ) { $val = shift @ARGV;;}
			if ( $val eq "" ) { &usage();}
			$infile = $val;
		} elsif ($flag eq "o") {
			if ( $val eq "" ) { $val = shift @ARGV;}
			if ( $val eq "" ) { &usage();}
			$outfile = $val;
		} elsif ($flag2 eq "v") {
			if ( $val ne "")  { &usage();}
			$verbose = 1;
		} elsif ($flag2 eq "ac") {
			$aconly = 1;
		} elsif ($flag2 eq "sysio") {
			$sysioonly = 1;
		} elsif ($flag2 eq "cpu") {
			$cpuonly = 1;
		} elsif ($flag2 eq "uk") {
			$ukonly = 1;
		} elsif ($flag2 eq "wfi") {
			$wfionly = 1;
		} elsif ($flag2 eq "avg") {
			$avgonly = 1;
		} elsif ($flag2 eq "eavg") {
			$eavgonly = 1;
		} else { &usage(); }
	} elsif ( $arg =~ /^(.*)$/ ) {
		$infile = $1;
	}
}



# if no flags are set or if verbose flag is set  then  set all flags.

if ( !($aconly || $sysioonly || $cpuonly || $wfionly || $avgonly || $eavgonly) || $verbose ) {
	$aconly = $sysioonly = $cpuonly = $wfionly =$avgonly = $eavgonly = 1;
}

if (defined $infile) {
	open(STDIN, "<$infile") || die "Could not open $infile\n";
}

if (defined $outfile) {
	open(STDOUT, ">$outfile") || die "Could not open $outfile\n";
}


$word = "[a-zA-Z,=0-9_-]+";
$smallword = "[a-zA-Z]+";
$num = "[0-9]+";
$dec = "[0-9]+\.[0-9]+|[0-9]+|\.[0-9]+|[0-9]+\.";
$time = 0;
#$total_tx = `sed -n -e "/^SUM_ALL_TRANS/,\$ p" *.tpb|head -3|tail -1`;
#$runtime = `sed -n -e "/^RUN_DATE/,\$ p" *.tpb|head -3|tail -1|awk '{print \$3}'`;
$total_tx = `grep "Total number of transactions" summary 2>/dev/null | awk '{print \$6}'`;
$runtime = `grep "^Run-time" summary 2>/dev/null | awk '{print \$3}'`;
if ($runtime > 0 && $total_tx > 0 ) {
$tps = $total_tx/$runtime  || die "Could not open summary \n";
}
#@psr_list = `grep since report|grep -v off-line`;
#@psr_list =  (0,1,2,3,32,33,34,35);
@psr_list = `grep -v total $infile |nawk 'NR > 1 {print \$2"\t"}' |sort -n |uniq`;
if ($debug) {
	print   
	"
	Assumptions:
	The counts are in millions and not mill/sec or percents
	Process ID in the output ignored.
	", 2 ** $CpuExp," processors per SSM node.
	", 2 ** $SysioExp," I/O boards per SSM node.
	", 2 ** $AcExp," address controllers per SSM node.

";
	print "X" x 80,"\n";
	print "The following lines in the input were ignored\n";
	print "X" x 80,"\n";
}

# ++++++++++++++changed by ZYF(cpustat)
while ($line = <STDIN>) {
	chop $line;
	if ( $line =~ /^\s*($dec)\s*($num)\s*($smallword)\s*($num)\s*($num)\s*\x23\s*($word)\s*$/ ){

                #Pprint " $1,  $2, $3, $4, $5, $6 \n";
                if ( $time == 0 ) { $time = $1;}
                if ( $3 =~/total/ ) { last;}
                $ctr_set = "cpu";
                $instance = $2;
                $cnt_a = ($4/1000000);
                @list=split(",",$6);
                @a=split("=",$list[0]);
                @b=split("=",$list[1]);
                $ctr_a = $a[1];
                $ctr_b = $b[1];
                $mode=$list[2];
                if ($mode eq "")
                  {$mode = "u";}
                if ($mode eq "sys")
                  {$mode = "uk";}
                if ($mode eq "nouser") 
                  {$mode = "k";}
                $cnt_b = ($5/1000000);
                $hash_a = join(",", ("cpu",$2,$mode, $ctr_a));
                $hash_b = join(",", ("cpu",$2,$mode, $ctr_b));
                $time{$hash_a} += $time;
                $count{$hash_a} += $cnt_a;
                $time{$hash_b} += $time;
                $count{$hash_b} += $cnt_b;
        
        }

}
# ++++++++++++++changed by ZYF(cpustat)

if ($debug) { print "X" x 80,"\n";}

foreach $ind (keys %time) {
	($ctr_set, $part_num, $mode, $ctr) = split(",",$ind);
	$persec{$ind} = $count{$ind}/$time{$ind};

	if ($ctr_set eq "cpu" && $mode eq "uk") {
		$cpu_total{$ctr} += $persec{$ind};
		$cpu_total_count{$ctr} += 1;
		$node = $part_num >> $CpuExp;
		$cpu_pernode{$node.",".$ctr} += $persec{$ind};
		$cpu_pernode_count{$node.",".$ctr} += 1;
		$cpu_per_part_num{$part_num.",".$ctr} += $persec{$ind};
                $cpu_per_part_num_count{$part_num.",".$ctr} += 1;

	}

	if ($ctr_set eq "cpu" && $mode eq "u") {
		$user_cpu_total{$ctr} += $persec{$ind};
		$user_cpu_total_count{$ctr} += 1;
		$node = $part_num >> $CpuExp;
		$user_cpu_pernode{$node.",".$ctr} += $persec{$ind};
		$user_cpu_pernode_count{$node.",".$ctr} += 1;
		$user_per_part_num{$part_num.",".$ctr} += $persec{$ind};
                $user_per_part_num_count{$part_num.",".$ctr} += 1;
       #         print "$ctr, $user_cpu_total{$ctr} \n";
	}

	if ($ctr_set eq "cpu" && $mode eq "k") {
		$kernel_cpu_total{$ctr} += $persec{$ind};
		$kernel_cpu_total_count{$ctr} += 1;
		$node = $part_num >> $CpuExp;
		$kernel_cpu_pernode{$node.",".$ctr} += $persec{$ind};
		$kernel_cpu_pernode_count{$node.",".$ctr} += 1;
		$kernel_per_part_num{$part_num.",".$ctr} += $persec{$ind};
                $kernel_per_part_num_count{$part_num.",".$ctr} += 1;
	}


	if ($ctr_set eq "AC" || $ctr_set eq "ac") {
		$ac_total{$ctr} += $persec{$ind};
		$ac_total_count{$ctr} += 1;
		$node = $part_num >> $AcExp;
		$ac_pernode{$node.",".$ctr} += $persec{$ind};
		$ac_pernode_count{$node.",".$ctr} += 1;
	}
}

if ($eavgonly) {
print "eavgonly = $eavgonly\n";
	&print_event_averages();
	print "\n";
}

if ($avgonly) {
	&print_all_averages();
}

#Print title
print "Title:cpustat\n\n";



	&print_cpu_cpi_breakdown();
	printf "\n";
	&print_indiv_cpu_cpi_breakdown();

	&print_cpu_mips();
	printf "\n";
	printf "\n";

	printf("Section: Instruction statistics\n");
	printf("-------------------------------\n");
	printf "\n";

	print "Stat";
	print "\t\tTotal" if ($cpuonly);
	print "\t\tUser\t\tKernel" if ($ukonly);

        print "\nLD_ST\t\t";
	&print_one_cpu_ratio_pct("load_store_instructions", "instruction_counts") if ($cpuonly);
	if ($ukonly) {
            print "\t";
            &print_one_user_cpu_ratio_pct("load_store_instructions", "instruction_counts");
            print "\t";
            &print_one_kernel_cpu_ratio_pct("load_store_instructions", "instruction_counts");
	}

        print "\nPF\t\t";
	&print_one_cpu_ratio_pct("prefetch_instructions", "instruction_counts") if ($cpuonly);
	if ($ukonly) {
            print "\t";
            &print_one_user_cpu_ratio_pct("prefetch_instructions", "instruction_counts");
            print "\t";
            &print_one_kernel_cpu_ratio_pct("prefetch_instructions", "instruction_counts");
	}

	printf "\nBR\t\t";
	&print_one_cpu_ratio_pct("branch_instructions", "instruction_counts") if ($cpuonly);
	if ($ukonly) {
            print "\t";
            &print_one_user_cpu_ratio_pct("branch_instructions", "instruction_counts");
            print "\t";
            &print_one_kernel_cpu_ratio_pct("branch_instructions", "instruction_counts");
	}

	printf "\n";

	&print_cpu_cache_stats();
	printf "\n";

	&print_cpu_tlb_stats();
	printf "\n";

	if ((defined $cpu_total{"strand_switch_all"}
		&& defined $user_cpu_total{"strand_switch_all"}
		&& defined $kernel_cpu_total{"strand_switch_all"}) 
		&& (($cpu_total{"strand_switch_all"} != 0)
		&& ($user_cpu_total{"strand_switch_all"} != 0)
		&& ($kernel_cpu_total{"strand_switch_all"} != 0))) {
		&print_cpu_vmt_stats();
		printf "\n";
	}

	printf "\n";


#if ($aconly) {
#	print "\n";
#	printf "Section: Memory Read/Write Statistics\n";
#	printf "-------------------------------------\n";
#
#	#&print_ALL_ac_membank_stats();
#	print "\n";
#}

sub print_event_averages
{
	local ($ctr);

	print "Event_Name #events/sec #instances #events/sec/instance\n";
	
	#print "CPU\n";
	print "\n";
	foreach $ctr (sort (keys %cpu_total)) {
		printf("%s %.4f %d %.4f\n",
							$ctr,
							$cpu_total{$ctr},
							$cpu_total_count{$ctr},
							$cpu_total{$ctr}/$cpu_total_count{$ctr});
	}
	#print "AC\n";
	print "\n";
	foreach $ctr (sort (keys %ac_total)) {
		printf("%s %.4f %d %.4f\n",
							$ctr,
							$ac_total{$ctr},
							$ac_total_count{$ctr},
							$ac_total{$ctr}/$ac_total_count{$ctr});
	}
	#print "SYSIO\n";
	print "\n";
	foreach $ctr (sort (keys %sysio_total)) {
		printf("%s %.4f %d %.4f\n",
							$ctr,
							$sysio_total{$ctr},
							$sysio_total_count{$ctr},
							$sysio_total{$ctr}/$sysio_total_count{$ctr});
	}
	#print "WFI\n";
	print "\n";
	foreach $ctr (sort (keys %wfi_total)) {
		printf("%s %.4f %d %.4f\n",
							$ctr,
							$wfi_total{$ctr},
							$wfi_total_count{$ctr},
							$wfi_total{$ctr}/$wfi_total_count{$ctr});
	}
}

sub print_all_averages 
{
	local ($before, %part_name, $key, $ctr_set, $part_num, $mode, $ctr);
	$before = "none";
	print "Event_name #events/sec Instance_Type Instance_number\n";
	foreach $key (sort mycmp (keys %time)) {
		($ctr_set, $part_num, $ctr) = split(",",$key);
		if ( $before ne $ctr_set ) { print "\n";}
		printf("%s %.4f %s %d\n",
					$ctr,
					$persec{$key},
					$ctr_set,
					$part_num);
		$before = $ctr_set;
	}
}



sub mycmp 
{
	($ctr_set_a, $part_num_a, $mode_a, $ctr_a) = split(",", $a);
	($ctr_set_b, $part_num_b, $mode_b, $ctr_b) = split(",", $b);

	$ctr_set_a cmp $ctr_set_b ||
	$part_num_a <=> $part_num_b ||
	$ctr_a cmp $ctr_b;
}


sub print_cpu_cpi_breakdown
{
	printf "Section: CPU statistics\n";
	print "-----------------------\n";	
	print "Stat";
	print "\t\tTotal" if ($cpuonly);
	print "\tUser\tKernel" if ($ukonly);

	print "\nCPI\t\t";
	&print_one_cpu_ratio_tab("active_cycle_count", "instruction_counts") if ($cpuonly);
	if ($ukonly) {
	    print "\t";
	    &print_one_user_cpu_ratio_tab("active_cycle_count", "instruction_counts");
	    print "\t";
	    &print_one_kernel_cpu_ratio_tab("active_cycle_count", "instruction_counts");
	}

        print "\n\nSection: Instr_stall components\n";
		print "-------------------------------\n";
	print "Stat";
	print "\t\tTotal" if ($cpuonly);
	print "\tUser\tKernel" if ($ukonly);

	print "\nIcache_stall\t";
	 &print_one_cpu_ratio_tab("if_wait_all", "instruction_counts") if ($cpuonly);
	 if ($ukonly) {
	     print "\t";
	     &print_one_user_cpu_ratio_tab("if_wait_all", "instruction_counts");
	     print "\t";
	     &print_one_kernel_cpu_ratio_tab("if_wait_all", "instruction_counts");
        }

	print "\n\nSection: Data_stall components\n";
	print "------------------------------\n";
	print "Stat";
	print "\t\tTotal" if ($cpuonly);
	print "\tUser\tKernel" if ($ukonly);


	print "\nDcache_stall\t";
	&print_one_cpu_ratio_tab("op_wait_all", "instruction_counts") if ($cpuonly);
	if ($ukonly) {
	    print "\t";
	    &print_one_user_cpu_ratio_tab("op_wait_all", "instruction_counts");
	    print "\t";
	    &print_one_kernel_cpu_ratio_tab("op_wait_all", "instruction_counts");
	}

        print "\nL2cache_dm\t";
	&print_one_cpu_ratio_tab("sx_miss_wait_dm", "instruction_counts") if ($cpuonly);
	if ($ukonly) {
	    print "\t";
	    &print_one_user_cpu_ratio_tab("sx_miss_wait_dm", "instruction_counts");
            print "\t";
            &print_one_kernel_cpu_ratio_tab("sx_miss_wait_dm", "instruction_counts");
	}

        print "\nL2cache_pf\t";
	&print_one_cpu_ratio_tab("sx_miss_wait_pf", "instruction_counts") if ($cpuonly);
	if ($ukonly) {
	    print "\t";
	    &print_one_user_cpu_ratio_tab("sx_miss_wait_pf", "instruction_counts");
            print "\t";
            &print_one_kernel_cpu_ratio_tab("sx_miss_wait_pf", "instruction_counts");
	}
	printf "\n";


}

sub print_indiv_cpu_cpi_breakdown
{
    if ($cpuonly) {
        print "\nSection: Total CPI per CPU\n";
	print "--------------------------\n";

#	print "CPUid\tCPI     \n";
	print "CPUid\tCPI     Icache_stall  Dcache_stall  L2cache_dm  L2cache_pf\n";
foreach $psr (@psr_list) {
                @pnum = split(/\t/, $psr);

                print "$pnum[0]\t";

                &print_one_indiv_cpu_ratio_tab("active_cycle_count", "instruction_counts",$pnum[0]);
	    	print "\t";
		&print_one_indiv_cpu_ratio_tab("if_wait_all", "instruction_counts" ,$pnum[0]);
	    	printf "\t\t";
		&print_one_indiv_cpu_ratio_tab("op_wait_all", "instruction_counts" ,$pnum[0]);
		printf "\t\t";
		&print_one_indiv_cpu_ratio_tab("sx_miss_wait_dm", "instruction_counts",$pnum[0]);
		printf "\t\t";
		&print_one_indiv_cpu_ratio_tab("sx_miss_wait_pf", "instruction_counts",$pnum[0]);
		print "\n";
}
     printf "\n";
    }
    if ($ukonly) {
        print "\nSection: User CPI per CPU\n";
	print "-------------------------\n";

#	print "CPUid\tCPI     \n";
	print "CPUid\tCPI     Icache_stall  Dcache_stall  L2cache_dm  L2cache_pf\n";
foreach $psr (@psr_list) {
                @pnum = split(/\t/, $psr);

                print "$pnum[0]\t";

                &print_one_indiv_user_cpu_ratio_tab("active_cycle_count", "instruction_counts",$pnum[0]);
		print "\t";
		&print_one_indiv_user_cpu_ratio_tab("if_wait_all", "instruction_counts" ,$pnum[0]);
		printf "\t\t";
		&print_one_indiv_user_cpu_ratio_tab("op_wait_all", "instruction_counts" ,$pnum[0]);
		printf "\t\t";
		&print_one_indiv_user_cpu_ratio_tab("sx_miss_wait_dm", "instruction_counts",$pnum[0]);
		printf "\t\t";
		&print_one_indiv_user_cpu_ratio_tab("sx_miss_wait_pf", "instruction_counts",$pnum[0]);
		print "\n";
}

        print "\nSection: Kernel CPI per CPU\n";
	print "---------------------------\n";

#	print "CPUid\tCPI     \n";
	print "CPUid\tCPI     Icache_stall  Dcache_stall  L2cache_dm  L2cache_pf\n";
foreach $psr (@psr_list) {
                @pnum = split(/\t/, $psr);

                print "$pnum[0]\t";

                &print_one_indiv_kernel_cpu_ratio_tab("active_cycle_count", "instruction_counts",$pnum[0]);
		print "\t";
		&print_one_indiv_kernel_cpu_ratio_tab("if_wait_all", "instruction_counts" ,$pnum[0]);
		printf "\t\t";
		&print_one_indiv_kernel_cpu_ratio_tab("op_wait_all", "instruction_counts" ,$pnum[0]);
		printf "\t\t";
		&print_one_indiv_kernel_cpu_ratio_tab("sx_miss_wait_dm", "instruction_counts",$pnum[0]);
		printf "\t\t";
		&print_one_indiv_kernel_cpu_ratio_tab("sx_miss_wait_pf", "instruction_counts",$pnum[0]);
		print "\n";
}
    }
}


sub print_cpu_prefetch_stats
{

        if ( $cpu_total{"instruction_counts"} != 0 ) {
		printf("%.2f%%    ",
                        ($cpu_total{"prefetch_instructions"} * 100 ) /
			$cpu_total{"instruction_counts"});
        }  else { return; }
}

sub print_user_cpu_prefetch_stats
{

        if ( $user_cpu_total{"instruction_counts"} != 0 ) {
		printf("%.2f%%    ",
                        ($user_cpu_total{"prefetch_instructions"} * 100 ) /
			$user_cpu_total{"instruction_counts"});
        }  else { return; }
}
sub print_kernel_cpu_prefetch_stats
{

        if ( $kernel_cpu_total{"instruction_counts"} != 0 ) {
		printf("%.2f%%    ",
                        ($kernel_cpu_total{"prefetch_instructions"} * 100 ) /
			$kernel_cpu_total{"instruction_counts"});
        }  else { return; }
}


sub print_cpu_load_store_stats
{

        if ( $cpu_total{"instruction_counts"} != 0 ) {
		printf("%.2f%%    ",
                        (($cpu_total{"load_store_instructions"}) * 100 ) /
			$cpu_total{"instruction_counts"});
        }  else { reurn; }
}

sub print_user_cpu_load_store_stats
{

        if ( $user_cpu_total{"instruction_counts"} != 0 ) {
		printf("%.2f%%    ",
                        (($user_cpu_total{"load_store_instructions"}) * 100 ) /
			$user_cpu_total{"instruction_counts"});
        }  else { return; }
}

sub print_kernel_cpu_load_store_stats
{

        if ( $kernel_cpu_total{"instruction_counts"} != 0 ) {
		printf("%.2f%%    ",
                        (($kernel_cpu_total{"load_store_instructions"}) * 100 ) /
			$kernel_cpu_total{"instruction_counts"});
        }  else { reurn; }
}

sub print_cpu_branch_stats
{

        if ( $cpu_total{"instruction_counts"} != 0 ) {
		printf("%.2f%%    ",
                        (($cpu_total{"branch_instructions"}) * 100 ) /
			$cpu_total{"instruction_counts"});
        }  else { return; }
}

sub print_user_cpu_branch_stats
{

	if ( $user_cpu_total{"instruction_counts"} != 0 ) {
		printf("%.2f%%	  ",
			(($user_cpu_total{"branch_instructions"}) * 100 ) /
			$user_cpu_total{"instruction_counts"});
	}  else { return; }
}

sub print_kernel_cpu_branch_stats
{

	if ( $kernel_cpu_total{"instruction_counts"} != 0 ) {
		printf("%.2f%%	  ",
			(($kernel_cpu_total{"branch_instructions"}) * 100 ) /
			$kernel_cpu_total{"instruction_counts"});
	}  else { return; }
}



sub print_cpu_mips
{
        print "\n\nSection: CPU MIPS\n";
	print "-----------------\n";
	print "CPU";
	print "\tTotal" if ($cpuonly);
	print "\tUser\tKernel" if ($ukonly);

	foreach $ind (sort(keys %cpu_per_part_num)) {
	    ($part_num,$ctr) = split(",",$ind);

	    if ($ctr eq "instruction_counts") {
		print "\n$part_num\t";
                printf("%.0f", $cpu_per_part_num{$ind}) if ($cpuonly);
		if ($ukonly) {
		    printf("\t%.0f", $user_per_part_num{$ind});
		    printf("\t%.0f", $kernel_per_part_num{$ind});
		}
	    }
	}



	local ($node, $key);

	print "\nMIPS";
	printf("\t%.0f", $cpu_total{"instruction_counts"}) if ($cpuonly);
	if ($ukonly) {
	    printf("\t%.0f", $user_cpu_total{"instruction_counts"});
	    printf("\t%.0f", $kernel_cpu_total{"instruction_counts"});
	}

if ($runtime > 0  && $total_tx > 0) {
        print "\nTPS";
        printf("\t%.2f", $tps) if ($cpuonly);
	if ($ukonly) {
	    printf("\t%.2f", $tps);;
	    printf("\t%.2f", $tps);;
	}

	print "\nM-Instr/Txn \t";
	printf("%.4f    ", $cpu_total{"instruction_counts"}/$tps) if ($cpuonly);
	if ($ukonly) {
	    printf("%.4f    ", $user_cpu_total{"instruction_counts"}/$tps);
	    printf("%.4f    ", $kernel_cpu_total{"instruction_counts"}/$tps);
	}
        printf "\n";
}
	printf "\n";
	printf "\n";
}



sub print_cpu_cache_stats
{
	print "\nSection: Level 1 cache miss rate (%)\n";
	print "------------------------------------\n";
	printf "\n";

	print "Stat";
	print "\t\tTotal" if ($cpuonly);
	print "\tUser\tKernel" if ($ukonly);

	print "\nIcMiss\t\t";
	&print_cpu_icmiss() if ($cpuonly);
	if ($ukonly) {
	    print "\t";
	    &print_user_cpu_icmiss();
	    print "\t";
	    &print_kernel_cpu_icmiss();
	}

	print "\nDcMiss\t\t";
	&print_cpu_dcmiss() if ($cpuonly);
	if ($ukonly) {
	    print "\t";
	    &print_user_cpu_dcmiss();
	    print "\t";
	    &print_kernel_cpu_dcmiss();
	}

	printf "\n";
	print "\nSection: Level 2 cache miss rate (%)\n";
	print "------------------------------------\n";
	printf "\n";

	print "Stat";
	print "\t\tTotal" if ($cpuonly);
	print "\tUser\tKernel" if ($ukonly);

	print "\nL2Miss\t\t";
	&print_cpu_L2miss() if ($cpuonly);
	if ($ukonly) {
	    print "\t";
	    &print_user_cpu_L2miss();
	    print "\t";
	    &print_kernel_cpu_L2miss();
	}

	print "\nL2_IC_Miss\t";
	printf("%.2f",
	       ($cpu_total{"sx_miss_count_dm_if"} * 100 ) / $cpu_total{"instruction_counts"});
	if ($ukonly) {
	    print "\t";
	    printf("%.2f",
		   ($user_cpu_total{"sx_miss_count_dm_if"} * 100 ) / $user_cpu_total{"instruction_counts"});
	    print "\t";
	    printf("%.2f",
		   ($kernel_cpu_total{"sx_miss_count_dm_if"} * 100 ) / $kernel_cpu_total{"instruction_counts"});
	}

	print "\nL2_DC_Miss\t";
	printf("%.2f",
	       (($cpu_total{"sx_miss_count_dm_opsh"} + $cpu_total{"sx_miss_count_dm_opex"}) * 100 ) / $cpu_total{"instruction_counts"});
	if ($ukonly) {
	    print "\t";
	    printf("%.2f",
		   (($user_cpu_total{"sx_miss_count_dm_opsh"} + $user_cpu_total{"sx_miss_count_dm_opex"}) * 100 ) / $user_cpu_total{"instruction_counts"});
	    print "\t";
	    printf("%.2f",
		   (($kernel_cpu_total{"sx_miss_count_dm_opsh"} + $kernel_cpu_total{"sx_miss_count_dm_opex"}) * 100 ) / $kernel_cpu_total{"instruction_counts"});
	}

	print "\nL2_pf\t\t";
	printf("%.2f",
	       ($cpu_total{"sx_miss_count_pf"} * 100 ) / $cpu_total{"instruction_counts"});
	if ($ukonly) {
	    print "\t";
	    printf("%.2f",
		   ($user_cpu_total{"sx_miss_count_pf"} * 100 ) / $user_cpu_total{"instruction_counts"});
	    print "\t";
	    printf("%.2f",
		   ($kernel_cpu_total{"sx_miss_count_pf"} * 100 ) / $kernel_cpu_total{"instruction_counts"});
	}

	print "\nL2_wb\t\t";
	printf("%.2f",
	       (($cpu_total{"dvp_count_dm"} + $cpu_total{"dvp_count_pf"}) * 100 ) /
	       $cpu_total{"instruction_counts"});
	if ($ukonly) {
	    print "\t";
	    printf("%.2f",
		   (($user_cpu_total{"dvp_count_dm"} + $user_cpu_total{"dvp_count_pf"}) * 100 ) /
		   $user_cpu_total{"instruction_counts"});
	    print "\t";
	    printf("%.2f",
		   (($kernel_cpu_total{"dvp_count_dm"} + $kernel_cpu_total{"dvp_count_pf"}) * 100 ) /
		   $kernel_cpu_total{"instruction_counts"});
	}

	printf "\n";
}

sub print_cpu_vmt_stats
{
	print "\nSection: Multi-thread switch rate (%)\n";
	print "-------------------------------------\n";
	printf "\n";

	print "Stat";
	print "\t\tTotal" if ($cpuonly);
	print "\tUser\tKernel" if ($ukonly);

	print "\nTS_L2Miss\t";
	printf("%.2f",
	       ($cpu_total{"ss_by_sxmiss"} * 100 ) / $cpu_total{"strand_switch_all"});
	if ($ukonly) {
	    print "\t";
	    printf("%.2f",
		   ($user_cpu_total{"ss_by_sxmiss"} * 100 ) / $user_cpu_total{"strand_switch_all"});
	    print "\t";
	    printf("%.2f",
		   ($kernel_cpu_total{"ss_by_sxmiss"} * 100 ) / $kernel_cpu_total{"strand_switch_all"});
	}

	print "\nTS_L2_ICMiss\t";
	printf("%.2f",
	       ($cpu_total{"ss_by_if"} * 100 ) / $cpu_total{"strand_switch_all"});
	if ($ukonly) {
	    print "\t";
	    printf("%.2f",
		   ($user_cpu_total{"ss_by_if"} * 100 ) / $user_cpu_total{"strand_switch_all"});
	    print "\t";
	    printf("%.2f",
		   ($kernel_cpu_total{"ss_by_if"} * 100 ) / $kernel_cpu_total{"strand_switch_all"});
	}

	print "\nTS_L2_D_IN\t";
	printf("%.2f",
	       ($cpu_total{"ss_by_data_arrive"} * 100 ) / $cpu_total{"strand_switch_all"});
	if ($ukonly) {
	    print "\t";
	    printf("%.2f",
		   ($user_cpu_total{"ss_by_data_arrive"} * 100 ) / $user_cpu_total{"strand_switch_all"});
	    print "\t";
	    printf("%.2f",
		   ($kernel_cpu_total{"ss_by_data_arrive"} * 100 ) / $kernel_cpu_total{"strand_switch_all"});
	}

	print "\nTS_TIMER\t";
	printf("%.2f",
	       ($cpu_total{"ss_by_timer"} * 100 ) / $cpu_total{"strand_switch_all"});
	if ($ukonly) {
	    print "\t";
	    printf("%.2f",
		   ($user_cpu_total{"ss_by_timer"} * 100 ) / $user_cpu_total{"strand_switch_all"});
	    print "\t";
	    printf("%.2f",
		   ($kernel_cpu_total{"ss_by_timer"} * 100 ) / $kernel_cpu_total{"strand_switch_all"});
	}

	print "\nTS_INTR\t\t";
	printf("%.2f",
	       ($cpu_total{"ss_by_intr"} * 100 ) / $cpu_total{"strand_switch_all"});
	if ($ukonly) {
	    print "\t";
	    printf("%.2f",
		   ($user_cpu_total{"ss_by_intr"} * 100 ) / $user_cpu_total{"strand_switch_all"});
	    print "\t";
	    printf("%.2f",
		   ($kernel_cpu_total{"ss_by_intr"} * 100 ) / $kernel_cpu_total{"strand_switch_all"});
	}

	print "\nTS_SUSP\t\t";
	printf("%.2f",
	       ($cpu_total{"ss_by_suspend"} * 100 ) / $cpu_total{"strand_switch_all"});
	if ($ukonly) {
	    print "\t";
	    printf("%.2f",
		   ($user_cpu_total{"ss_by_suspend"} * 100 ) / $user_cpu_total{"strand_switch_all"});
	    print "\t";
	    printf("%.2f",
		   ($kernel_cpu_total{"ss_by_suspend"} * 100 ) / $kernel_cpu_total{"strand_switch_all"});
	}

	print "\nTS_SPIN\t\t";
	printf("%.2f",
	       ($cpu_total{"ss_by_spinloop"} * 100 ) / $cpu_total{"strand_switch_all"});
	if ($ukonly) {
	    print "\t";
	    printf("%.2f",
		   ($user_cpu_total{"ss_by_spinloop"} * 100 ) / $user_cpu_total{"strand_switch_all"});
	    print "\t";
	    printf("%.2f",
		   ($kernel_cpu_total{"ss_by_spinloop"} * 100 ) / $kernel_cpu_total{"strand_switch_all"});
	}

	print "\nTS_OTHER\t";
	printf("%.2f",
	       ($cpu_total{"ss_by_other"} * 100 ) / $cpu_total{"strand_switch_all"});
	if ($ukonly) {
	    print "\t";
	    printf("%.2f",
		   ($user_cpu_total{"ss_by_other"} * 100 ) / $user_cpu_total{"strand_switch_all"});
	    print "\t";
	    printf("%.2f",
		   ($kernel_cpu_total{"ss_by_other"} * 100 ) / $kernel_cpu_total{"strand_switch_all"});
	}

	printf "\n";
}

sub print_cpu_tlb_stats
{
    if ($cpuonly) {
        print "\nSection: Total TLB miss rate per CPU\n";
	print "------------------------------------\n";

	print "CPUid\tuITLB_miss  ITLB_miss  uDTLB_miss  DTLB_miss\n";
foreach $psr (@psr_list) {
                @pnum = split(/\t/, $psr);

                print "$pnum[0]\t";

                &print_one_indiv_cpu_ratio_pct("write_if_uTLB", "instruction_counts",$pnum[0]);
	    	print "\t\t";
		&print_one_indiv_cpu_ratio_pct("trap_IMMU_miss", "instruction_counts" ,$pnum[0]);
	    	printf "\t";
		&print_one_indiv_cpu_ratio_pct("write_op_uTLB", "instruction_counts" ,$pnum[0]);
		printf "\t\t";
		&print_one_indiv_cpu_ratio_pct("trap_DMMU_miss", "instruction_counts",$pnum[0]);
		print "\n";
}
     printf "\n";
    }
    if ($ukonly) {
        print "\nSection: User TLB miss rate per CPU\n";
	print "-----------------------------------\n";

	print "CPUid\tuITLB_miss  ITLB_miss  uDTLB_miss	 DTLB_miss\n";
foreach $psr (@psr_list) {
                @pnum = split(/\t/, $psr);

                print "$pnum[0]\t";

                &print_one_indiv_user_cpu_ratio_pct("write_if_uTLB", "instruction_counts",$pnum[0]);
		print "\t\t";
		&print_one_indiv_user_cpu_ratio_pct("trap_IMMU_miss", "instruction_counts" ,$pnum[0]);
		printf "\t";
		&print_one_indiv_user_cpu_ratio_pct("write_op_uTLB", "instruction_counts" ,$pnum[0]);
		printf "\t\t";
		&print_one_indiv_user_cpu_ratio_pct("trap_DMMU_miss", "instruction_counts",$pnum[0]);
		print "\n";
}

        print "\nSection: Kernel TLB miss rate per CPU\n";
	print "-------------------------------------\n";

	print "CPUid\tuITLB_miss  ITLB_miss  uDTLB_miss	 DTLB_miss\n";
foreach $psr (@psr_list) {
                @pnum = split(/\t/, $psr);

                print "$pnum[0]\t";

                &print_one_indiv_kernel_cpu_ratio_pct("write_if_uTLB", "instruction_counts",$pnum[0]);
		print "\t\t";
		&print_one_indiv_kernel_cpu_ratio_pct("trap_IMMU_miss", "instruction_counts" ,$pnum[0]);
		printf "\t";
		&print_one_indiv_kernel_cpu_ratio_pct("write_op_uTLB", "instruction_counts" ,$pnum[0]);
		printf "\t\t";
		&print_one_indiv_kernel_cpu_ratio_pct("trap_DMMU_miss", "instruction_counts",$pnum[0]);
		print "\n";
}
    }
}

sub print_one_cpu_ratio_tab
{
	local ($ctr1, $ctr2) = ($_[0], $_[1]);
	local ($node, $key1, $key2);
	if (defined $cpu_total{$ctr1} && defined $cpu_total{$ctr2} && 
	    $cpu_total{$ctr2} != 0 ) {
		printf("%.3f", $cpu_total{$ctr1}/$cpu_total{$ctr2});
	} else { printf(" empty  "); }
}

sub print_one_user_cpu_ratio_tab
{
	local ($ctr1, $ctr2) = ($_[0], $_[1]);
	local ($node, $key1, $key2);

	if (defined $user_cpu_total{$ctr1} && defined $user_cpu_total{$ctr2} && 
	    $user_cpu_total{$ctr2} != 0 ) {
		printf("%.3f", $user_cpu_total{$ctr1}/$user_cpu_total{$ctr2});
	} else { printf(" empty  "); }
}

sub print_one_kernel_cpu_ratio_tab
{
	local ($ctr1, $ctr2) = ($_[0], $_[1]);
	local ($node, $key1, $key2);
	if (defined $kernel_cpu_total{$ctr1} && defined $kernel_cpu_total{$ctr2} && 
	    $kernel_cpu_total{$ctr2} != 0 ) {
		printf("%.3f", $kernel_cpu_total{$ctr1}/$kernel_cpu_total{$ctr2});
	} else { printf(" empty  "); }
}

sub print_one_cpu_ratio_pct
{
	local ($ctr1, $ctr2) = ($_[0], $_[1]);
	local ($node, $key1, $key2);

	if (defined $cpu_total{$ctr1} && defined $cpu_total{$ctr2} && 
	    $cpu_total{$ctr2} != 0 ) {
		printf("%.2f%%	", $cpu_total{$ctr1}/$cpu_total{$ctr2}* 100);
	} else { return; }
}

sub print_one_user_cpu_ratio_pct
{
	local ($ctr1, $ctr2) = ($_[0], $_[1]);
	local ($node, $key1, $key2);

	if (defined $user_cpu_total{$ctr1} && defined $user_cpu_total{$ctr2} && 
	    $user_cpu_total{$ctr2} != 0 ) {
		printf("%.2f%%	", $user_cpu_total{$ctr1}/$user_cpu_total{$ctr2}* 100);
	} else { return; }
}

sub print_one_kernel_cpu_ratio_pct
{
	local ($ctr1, $ctr2) = ($_[0], $_[1]);
	local ($node, $key1, $key2);

	if (defined $kernel_cpu_total{$ctr1} && defined $kernel_cpu_total{$ctr2} && 
	    $kernel_cpu_total{$ctr2} != 0 ) {
		printf("%.2f%%	", $kernel_cpu_total{$ctr1}/$kernel_cpu_total{$ctr2}* 100);
	} else { return; }
}



sub print_cpu_icmiss
{
	local($node, $k1, $k2, $k3);

	if (defined $cpu_total{"if_r_iu_req_mi_go"} &&
		defined $cpu_total{"instruction_counts"} &&
	    $cpu_total{"instruction_counts"} != 0 ) {
		printf("%.2f",
			($cpu_total{"if_r_iu_req_mi_go"} / $cpu_total{"instruction_counts"} * 100 ));
	} else { return; }
}

sub print_user_cpu_icmiss
{
	local($node, $k1, $k2, $k3);

	if (defined $user_cpu_total{"if_r_iu_req_mi_go"} &&
		defined $user_cpu_total{"instruction_counts"} &&
	    $user_cpu_total{"instruction_counts"} != 0 ) {
		printf("%.2f",
			($user_cpu_total{"if_r_iu_req_mi_go"} / $user_cpu_total{"instruction_counts"} * 100 ));
	} else { return; }
}

sub print_kernel_cpu_icmiss
{
	local($node, $k1, $k2, $k3);

	if (defined $kernel_cpu_total{"if_r_iu_req_mi_go"} &&
		defined $kernel_cpu_total{"instruction_counts"} &&
	    $kernel_cpu_total{"instruction_counts"} != 0 ) {
		printf("%.2f",
			($kernel_cpu_total{"if_r_iu_req_mi_go"} / $kernel_cpu_total{"instruction_counts"} * 100 ));
	} else { return; }
}

sub print_cpu_L2miss
{
	local($node, $k1, $k2, $k3);

	if (defined $cpu_total{"sx_read_count_dm"} &&
	    defined $cpu_total{"sx_miss_count_dm"} &&
		defined $cpu_total{"instruction_counts"} &&
	    $cpu_total{"instruction_counts"} != 0 ) {
		printf("%.2f",
			($cpu_total{"sx_miss_count_dm"} + $cpu_total{"sx_miss_count_pf"}) * 100 /
			$cpu_total{"instruction_counts"});
	} else { printf("empty"); }
}

sub print_user_cpu_L2miss
{
	local($node, $k1, $k2, $k3);

	if (defined $user_cpu_total{"sx_read_count_dm"} &&
	    defined $user_cpu_total{"sx_miss_count_dm"} &&
		defined $user_cpu_total{"instruction_counts"} &&
	    $user_cpu_total{"instruction_counts"} != 0 ) {
		printf("%.2f",
			($user_cpu_total{"sx_miss_count_dm"} + $user_cpu_total{"sx_miss_count_pf"}) * 100  /
			$user_cpu_total{"instruction_counts"});
	} else { printf("empty"); }
}
sub print_kernel_cpu_L2miss
{
	local($node, $k1, $k2, $k3);

	if (defined $kernel_cpu_total{"sx_read_count_dm"} &&
	    defined $kernel_cpu_total{"sx_miss_count_dm"} &&
		defined $kernel_cpu_total{"instruction_counts"} &&
	    $kernel_cpu_total{"instruction_counts"} != 0 ) {
		printf("%.2f",
			($kernel_cpu_total{"sx_miss_count_dm"} + $kernel_cpu_total{"sx_miss_count_pf"})  /
			$kernel_cpu_total{"instruction_counts"} * 100 );
	} else { printf("empty"); }
}


sub  print_cpu_dcmiss
{
	local($node, $k1, $k2, $k3, $k4, $k5);

	if (defined $cpu_total{"op_r_iu_req_mi_go"} &&
		defined $cpu_total{"instruction_counts"} &&
	    $cpu_total{"instruction_counts"} != 0 ) {
		printf("%.2f",
			$cpu_total{"op_r_iu_req_mi_go"} / 
			$cpu_total{"instruction_counts"} * 100 );
	} else { return; }
}


sub  print_user_cpu_dcmiss
{
	local($node, $k1, $k2, $k3, $k4, $k5);

	if (defined $user_cpu_total{"op_r_iu_req_mi_go"} &&
		defined $user_cpu_total{"instruction_counts"} &&
	    $user_cpu_total{"instruction_counts"} != 0 ) {
		printf("%.2f",
			$user_cpu_total{"op_r_iu_req_mi_go"} / 
			$user_cpu_total{"instruction_counts"} * 100 );
	} else { return; }
}

sub  print_kernel_cpu_dcmiss
{
	local($node, $k1, $k2, $k3, $k4, $k5);

	if (defined $kernel_cpu_total{"op_r_iu_req_mi_go"} &&
		defined $kernel_cpu_total{"instruction_counts"} &&
	    $kernel_cpu_total{"instruction_counts"} != 0 ) {
		printf("%.2f",
			$kernel_cpu_total{"op_r_iu_req_mi_go"} / 
			$kernel_cpu_total{"instruction_counts"} * 100 );
	} else { return; }
}


sub usage
{
	print "
	usage : $0 [-i <infile>] [-o <outfile>] [-v] [<infile>]
	-i <name>: input file name
	-o <name>: output file name
	-uk:  print CPU user and kernel related data
        -v : turn on verbose 
	
	-cpu   : print only CPU related data
	-ac    : print only AC related data
	-avg   : print only the per second counter values
	-eavg  : print only the per second event counts \n";

	exit 1;
}


sub print_one_indiv_cpu_ratio_tab
{
        local ($ctr1, $ctr2, $part_num) = ($_[0], $_[1], $_[2]);
        local ($node, $key1, $key2);
if ($cpu_per_part_num{$part_num.",".$ctr2} != 0) {
                printf("%.3f", $cpu_per_part_num{$part_num.",".$ctr1}/$cpu_per_part_num{$part_num.",".$ctr2});
        } else { return; }

}

sub print_one_indiv_user_cpu_ratio_tab
{

        local ($ctr1, $ctr2, $part_num) = ($_[0], $_[1], $_[2]);
        local ($node, $key1, $key2);


if ($user_per_part_num{$part_num.",".$ctr2} != 0) {
                printf("%.3f", $user_per_part_num{$part_num.",".$ctr1}/$user_per_part_num{$part_num.",".$ctr2});
        } else { return; }
}

sub print_one_indiv_kernel_cpu_ratio_tab
{

        local ($ctr1, $ctr2, $part_num) = ($_[0], $_[1], $_[2]);
        local ($node, $key1, $key2);


if ($kernel_per_part_num{$part_num.",".$ctr2} != 0) {
                printf("%.3f", $kernel_per_part_num{$part_num.",".$ctr1}/$kernel_per_part_num{$part_num.",".$ctr2});
        } else { return; }
}


sub print_one_indiv_cpu_ratio_pct
{
        local ($ctr1, $ctr2, $part_num) = ($_[0], $_[1], $_[2]);
        local ($node, $key1, $key2);
if ($cpu_per_part_num{$part_num.",".$ctr2} != 0) {
                printf("%.3f", $cpu_per_part_num{$part_num.",".$ctr1}/$cpu_per_part_num{$part_num.",".$ctr2} * 100);
        } else { return; }

}

sub print_one_indiv_user_cpu_ratio_pct
{

        local ($ctr1, $ctr2, $part_num) = ($_[0], $_[1], $_[2]);
        local ($node, $key1, $key2);


if ($user_per_part_num{$part_num.",".$ctr2} != 0) {
                printf("%.3f", $user_per_part_num{$part_num.",".$ctr1}/$user_per_part_num{$part_num.",".$ctr2} * 100);
        } else { return; }
}

sub print_one_indiv_kernel_cpu_ratio_pct
{

        local ($ctr1, $ctr2, $part_num) = ($_[0], $_[1], $_[2]);
        local ($node, $key1, $key2);


if ($kernel_per_part_num{$part_num.",".$ctr2} != 0) {
                printf("%.3f", $kernel_per_part_num{$part_num.",".$ctr1}/$kernel_per_part_num{$part_num.",".$ctr2} * 100);
        } else { return; }
}
