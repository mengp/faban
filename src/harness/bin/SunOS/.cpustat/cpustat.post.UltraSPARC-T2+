#!/usr/bin/perl

##################################
# Define constants here
*DEFAULT_FREQUENCY = \1417 ; # 1417 MHz
##################################

# Tunables

$debug = 0;
$expertonly = 0;
$CpuExp = 3;
$frequency = $DEFAULT_FREQUENCY;
$max_mips = $frequency*1024*1024/1000000;

# Get options 

if ($#ARGV == -1) {&usage();}

while ($#ARGV > -1) {
	$arg = shift @ARGV;
	if ( $arg =~ /^-(.)(.*)$/ ) {
		$flag=$1; $val=$2;
		$flag2=$flag.$val;
		if ( $flag eq "i" ) {
			if ( $val eq "" ) { $val = shift @ARGV;}
			if ( $val eq "" ) { &usage();}
			$infile = $val;
		} elsif ($flag eq "o") {
			if ( $val eq "" ) { $val = shift @ARGV;}
			if ( $val eq "" ) { &usage();}
			$outfile = $val;
		} elsif ($flag eq "v") {
			if ( $val ne "")  { &usage();}
			$verbose = 1;
		} elsif ($flag2 eq "cpu") {
			$cpuonly = 1;
		} elsif ($flag2 eq "uk") {
			$ukonly = 1;
		} elsif ($flag2 eq "exp") {
			$expertonly = 1;
		} else { &usage(); }
	} elsif ( $arg =~ /^(.*)$/ ) {
		$infile = $1;
	}
}

# if no flags are set or if verbose flag is set  then  set all flags.

if ( !($cpuonly) || $verbose ) {
	$cpuonly = 1;
}

if (defined $infile) {
	open(STDIN, "<$infile") || die "Could not open $infile\n";
}

if (defined $outfile) {
	open(STDOUT, ">$outfile") || die "Could not open $outfile\n";
}


$word = "[a-zA-Z,=0-9_-]+";
$smallword = "[a-zA-Z]+";
$num = "[0-9]+";
$dec = "[0-9]+\.[0-9]+|[0-9]+|\.[0-9]+|[0-9]+\.";
$time = 0;


@psr_list = `grep -v total $infile |nawk 'NR > 1 {print \$2"\t"}' |sort -n |uniq`;
#print "Strands active $psr_list \n" ;
if ($debug) {
	print   
	"
	Assumptions:
	The counts are in millions and not mill/sec or percents
	Process ID in the output ignored.
	", 2 ** $CpuExp," processors per core. \n";
	print "X" x 80,"\n";
	print "The following lines in the input were ignored\n";
	print "X" x 80,"\n";
}

while ($line = <STDIN>) {
	chop $line;
	if ( $line =~ /^\s*($dec)\s*($num)\s*($smallword)\s*($num)\s*($num)\s*\x23\s*($word)\s*$/ ){
               #print " $1,  $2, $3, $4, $5, $6 \n";
                if ( $time == 0 ) { $time = $1;}
                if (  $3 =~/exit/ || $3 =~/total/ ) { last;}
                $ctr_set = "cpu";
                $instance = $2;
                $cnt_a = ($4/1000000);
                @list=split(",",$6);
                @a=split("=",$list[0]);
                @b=split("=",$list[1]);
                $mode=$list[2];

		if ($b[0] eq "sys") 
		{ $mode= "sys";
		  @b=split("=",$list[2]);}
		elsif ($b[0] eq "nouser") 
		{ $mode= "nouser";
		  @b=split("=",$list[3]);}
		elsif ($b[0] eq "hpriv") 
		{ $mode= "hpriv";
		  @b=split("=",$list[2]);}

                $ctr_a = $a[1];
                $ctr_b = $b[1];
		#print "$list[0],  $list[1], $list[2], $list[3], $list[4], $a[0] $a[1], $b[0] $b[1]\n";
                if ($mode eq "")
                  {$mode = "u";}
                if ($mode eq "sys")
                  {$mode = "uk";}
                if ($mode eq "nouser")
                  {$mode = "k";}
                if ($mode eq "hpriv")
                  {$mode = "h";}
                $cnt_b = ($5/1000000);
                $hash_a = join(",", ("cpu",$2,$mode, $ctr_a));
                $hash_b = join(",", ("cpu",$2,$mode, $ctr_b));
                $time{$hash_a} += $time;
                $count{$hash_a} += $cnt_a;
                $time{$hash_b} += $time;
                $count{$hash_b} += $cnt_b;

	#	print "$cnt_a, $cnt_b, $mode $time, $hash_a $time{$hash_a} $count{$hash_a}, $hash_b $time{$hash_b} $count{$hash_b} \n";
        }

}

foreach $ind (keys %time) {
	($ctr_set, $part_num, $mode, $ctr) = split(",",$ind);
	$persec{$ind} = $count{$ind}/$time{$ind};

	if ($ctr_set eq "cpu" && $mode eq "uk") {
		$cpu_total{$ctr} += $persec{$ind};
		$cpu_total_count{$ctr} += 1;
	#	$core = ($part_num&0x38) >> $CpuExp;
		$core = ($part_num&0x78) >> $CpuExp;
	#	printf ("Core = %d, part = %d\n", $core, $part_num) ;
		$cpu_percore{$core.",".$ctr} += $persec{$ind};
	#	$cpu_percore{$core.",".$ctr} += $count{$ind};
		$cpu_percore_count{$core.",".$ctr} += 1;
		$cpu_per_part_num{$part_num.",".$ctr} += $persec{$ind};
                $cpu_per_part_num_count{$part_num.",".$ctr} += 1;
	#	printf($ctr, $cpu_total{$ctr},",\t", $core, $cpu_percore{$core.",".$ctr}, "\n");
	#	printf("ctr %s count %d time %d persec %d cpu_total %d \n", $ctr, $count{$ind}, $time{$ind}, $persec{$ind}, $cpu_total{$ctr});
	}

	if ($ctr_set eq "cpu" && $mode eq "u") {
		$user_cpu_total{$ctr} += $persec{$ind};
		$user_cpu_total_count{$ctr} += 1;
		$core = ($part_num&0x38) >> $CpuExp;
		$user_cpu_percore{$core.",".$ctr} += $persec{$ind};
		$user_cpu_percore_count{$core.",".$ctr} += 1;
		$user_per_part_num{$part_num.",".$ctr} += $persec{$ind};
                $user_per_part_num_count{$part_num.",".$ctr} += 1;
	#	printf($ctr, $user_cpu_total{$ctr},",\t", $core, $user_cpu_percore{$core.",".$ctr}, "\n");
	}

	if ($ctr_set eq "cpu" && $mode eq "k") {
		$kernel_cpu_total{$ctr} += $persec{$ind};
		$kernel_cpu_total_count{$ctr} += 1;
		$core = ($part_num&0x38) >> $CpuExp;
		$kernel_cpu_percore{$core.",".$ctr} += $persec{$ind};
		$kernel_cpu_percore_count{$core.",".$ctr} += 1;
		$kernel_per_part_num{$part_num.",".$ctr} += $persec{$ind};
                $kernel_per_part_num_count{$part_num.",".$ctr} += 1;
	#	printf($ctr, $kernel_cpu_total{$ctr},",\t", $core, $kernel_cpu_percore{$core.",".$ctr}, "\n");
	}


	if ($ctr_set eq "cpu" && $mode eq "h") {
		$hpriv_cpu_total{$ctr} += $persec{$ind};
		$hpriv_cpu_total_count{$ctr} += 1;
		$core = ($part_num&0x38) >> $CpuExp;
		$hpriv_cpu_percore{$core.",".$ctr} += $persec{$ind};
		$hpriv_cpu_percore_count{$core.",".$ctr} += 1;
		$hpriv_per_part_num{$part_num.",".$ctr} += $persec{$ind};
		$hpriv_per_part_num_count{$part_num.",".$ctr} += 1;
	#	printf($ctr, $hpriv_cpu_total{$ctr},",\t", $core, $hpriv_cpu_percore{$core.",".$ctr}, "\n");
	}

}

	if ($debug) {
		print "Event_Name #events/sec #instances #events/sec/instance\n";
		print "\n";
		foreach $ctr (sort (keys %cpu_total)) {
			printf("%s %.4f %d %.4f\n",
				$ctr,
				$cpu_total{$ctr},
				$cpu_total_count{$ctr},
				$cpu_total{$ctr}/$cpu_total_count{$ctr});
		}

		print "\n";
		print "CoreId Event_Name #events/sec #instances #events/sec/instance\n";
		print "\n";
		foreach $ind (sort(keys %cpu_percore)) {
			($core,$ctr) = split(",",$ind);

			printf("%d %s %.4f %d %.4f\n",
			$core,
			$ctr,
			$cpu_percore{$core.",".$ctr},
			$cpu_percore_count{$core.",".$ctr},
			$cpu_percore{$core.",".$ctr}/$cpu_percore_count{$core.",".$ctr});
		}
		print "\n";
		print "X" x 80,"\n";
	}

#Print title
print "Title:cpustat\n\n";

	&print_cpu_idle_strands_percore_stats();
	printf "\n";
	printf "\n";

	&print_cpu_mips_percore_stats();
	printf "\n";
	printf "\n";

	if ($expertonly) {
		&print_cpu_mips_perstrand_stats();
		printf "\n";
		printf "\n";
	}

	&print_cpu_instruction_stats();
	printf "\n";
        printf "\n";

	&print_cpu_cache_stats();
	printf "\n";
	printf "\n";

	if ($expertonly) {
		&print_cpu_cache_percore_stats();
		printf "\n";
		printf "\n";
	}

	&print_cpu_tlb_percore_stats();
	printf "\n";
	printf "\n";

	if ($expertonly) {
		&print_cpu_tlb_perstrand_stats();
		printf "\n";
		printf "\n";
	}

sub mycmp 
{
	($ctr_set_a, $part_num_a, $mode_a, $ctr_a) = split(",", $a);
	($ctr_set_b, $part_num_b, $mode_b, $ctr_b) = split(",", $b);

	$ctr_set_a cmp $ctr_set_b ||
	$part_num_a <=> $part_num_b ||
	$ctr_a cmp $ctr_b;
}

sub print_cpu_idle_strands_percore_stats
{

	local($core, $key, $ctr);

 	print "\n\nSection: % Idle Cycle per Core \n";
	print "------------------------------\n";

	print "CoreId";
	print "\tTotal" if ($cpuonly);
	print "\tUser\tKernel\tHpriv" if ($ukonly);

	foreach $ind (sort(keys %cpu_percore)) {
            ($core,$ctr) = split(",",$ind);

            if ($ctr eq "Idle_strands") {
                print "\n$core\t";
                printf("%.2f%%", ($cpu_percore{$core.",".$ctr} * 100) / ($max_mips * $cpu_percore_count{$core.",".$ctr})) if ($cpuonly);
		if ($ukonly) {
                    printf("\t%.2f%%", ($user_cpu_percore{$core.",".$ctr} * 100) / ($max_mips * $user_cpu_percore_count{$core.",".$ctr}));
                    printf("\t%.2f%%", ($kernel_cpu_percore{$core.",".$ctr} * 100) / ($max_mips * $kernel_cpu_percore_count{$core.",".$ctr}));
		    printf("\t%.2f%%", ($hpriv_cpu_percore{$core.",".$ctr} * 100) / ($max_mips * $hpriv_cpu_percore_count{$core.",".$ctr}));
		}
            }
	}
}

sub print_cpu_instruction_stats
{
	printf("\n\nSection: Instruction statistics\n");
	printf("-------------------------------\n");

	print "Stat";
	print "\t\tTotal" if ($cpuonly);
	print "\t\tUser\t\tKernel\t\tHpriv" if ($ukonly);

	print "\nLOAD\t\t";
	&print_one_cpu_ratio_pct("Instr_ld", "Instr_cnt") if ($cpuonly);
	if ($ukonly) {
            print "\t";
            &print_one_user_cpu_ratio_pct("Instr_ld", "Instr_cnt");
            print "\t";
            &print_one_kernel_cpu_ratio_pct("Instr_ld", "Instr_cnt");
            print "\t";
            &print_one_hpriv_cpu_ratio_pct("Instr_ld", "Instr_cnt");
	}

	print "\nSTORE\t\t";
	&print_one_cpu_ratio_pct("Instr_st", "Instr_cnt") if ($cpuonly);
	if ($ukonly) {
            print "\t";
            &print_one_user_cpu_ratio_pct("Instr_st", "Instr_cnt");
            print "\t";
            &print_one_kernel_cpu_ratio_pct("Instr_st", "Instr_cnt");
            print "\t";
            &print_one_hpriv_cpu_ratio_pct("Instr_st", "Instr_cnt");
	}

	print "\nInstr_SW\t";
	&print_one_cpu_ratio_pct("Instr_sw", "Instr_cnt") if ($cpuonly);
	if ($ukonly) {
            print "\t";
            &print_one_user_cpu_ratio_pct("Instr_sw", "Instr_cnt");
            print "\t";
            &print_one_kernel_cpu_ratio_pct("Instr_sw", "Instr_cnt");
            print "\t";
            &print_one_hpriv_cpu_ratio_pct("Instr_sw", "Instr_cnt");
	}

	print "\nInstr_other\t";
	&print_one_cpu_ratio_pct("Instr_other", "Instr_cnt") if ($cpuonly);
	if ($ukonly) {
            print "\t";
            &print_one_user_cpu_ratio_pct("Instr_other", "Instr_cnt");
            print "\t";
            &print_one_kernel_cpu_ratio_pct("Instr_other", "Instr_cnt");
            print "\t";
            &print_one_hpriv_cpu_ratio_pct("Instr_other", "Instr_cnt");
	}

	print "\nInstr_FGU\t";
	&print_one_cpu_ratio_pct("Instr_FGU_arithmetic", "Instr_cnt") if ($cpuonly);
	if ($ukonly) {
            print "\t";
            &print_one_user_cpu_ratio_pct("Instr_FGU_arithmetic", "Instr_cnt");
            print "\t";
            &print_one_kernel_cpu_ratio_pct("Instr_FGU_arithmetic", "Instr_cnt");
            print "\t";
            &print_one_hpriv_cpu_ratio_pct("Instr_FGU_arithmetic", "Instr_cnt");
	}

        printf "\nBR_CMPT\t\t";
	&print_one_cpu_ratio_pct("Br_completed", "Instr_cnt") if ($cpuonly);
	if ($ukonly) {
            print "\t";
            &print_one_user_cpu_ratio_pct("Br_completed", "Instr_cnt");
            print "\t";
            &print_one_kernel_cpu_ratio_pct("Br_completed", "Instr_cnt");
            print "\t";
            &print_one_hpriv_cpu_ratio_pct("Br_completed", "Instr_cnt");
	}

        print "\nBR_TKN\t\t";
	&print_one_cpu_ratio_pct("Br_taken", "Instr_cnt") if ($cpuonly);
	if ($ukonly) {
            print "\t";
            &print_one_user_cpu_ratio_pct("Br_taken", "Instr_cnt");
            print "\t";
            &print_one_kernel_cpu_ratio_pct("Br_taken", "Instr_cnt");
            print "\t";
            &print_one_hpriv_cpu_ratio_pct("Br_taken", "Instr_cnt");
	}
}

sub print_cpu_mips_percore_stats
{

	local($core, $key, $ctr);

 	print "\n\nSection: MIPS per Core \n";
	print "----------------------\n";

	print "CoreId";
	print "\tTotal" if ($cpuonly);
	print "\tUser\tKernel\tHpriv" if ($ukonly);

	foreach $ind (sort(keys %cpu_percore)) {
            ($core,$ctr) = split(",",$ind);

            if ($ctr eq "Instr_cnt") {
                print "\n$core\t";
                printf("%.0f", $cpu_percore{$core.",".$ctr}) if ($cpuonly);
		if ($ukonly) {
                    printf("\t%.0f", $user_cpu_percore{$core.",".$ctr});
                    printf("\t%.0f", $kernel_cpu_percore{$core.",".$ctr});
		    printf("\t%.0f", $hpriv_cpu_percore{$core.",".$ctr});
		}
            }
	}

	print "\nMIPS\t";
	printf("%.0f", $cpu_total{"Instr_cnt"}) if ($cpuonly);
	if ($ukonly) {
            printf("\t%.0f", $user_cpu_total{"Instr_cnt"});
            printf("\t%.0f", $kernel_cpu_total{"Instr_cnt"});
            printf("\t%.0f", $hpriv_cpu_total{"Instr_cnt"});
	}
}

sub print_cpu_mips_perstrand_stats
{
	local($key, $part_num, $ctr);

 	print "\n\nSection: MIPS per Strand \n";
	print "------------------------\n";

	print "Strand";
	print "\tTotal" if ($cpuonly);
	print "\tUser\tKernel\tHpriv" if ($ukonly);

	foreach $ind (sort(keys %cpu_per_part_num)) {
            ($part_num,$ctr) = split(",",$ind);

            if ($ctr eq "Instr_cnt") {
		print "\n$part_num\t";
		printf("%.0f", $cpu_per_part_num{$ind}) if ($cpuonly);
		if ($ukonly) {
                    printf("\t%.0f", $user_per_part_num{$ind});
                    printf("\t%.0f", $kernel_per_part_num{$ind});
                    printf("\t%.0f", $hpriv_per_part_num{$ind});
		}
            }
	}
}

sub print_cpu_tlb_perstrand_stats
{
    if ($cpuonly) {
	print "\n\nSection: Total TLB miss rate per Strand\n";
	print "---------------------------------------\n";

	print "StrandId\tITLB_miss  DTLB_miss\n";
	foreach $psr (@psr_list) {
		@pnum = split(/\t/, $psr);

		print "$pnum[0]\t";

		&print_one_indiv_cpu_ratio_pct("ITLB_miss", "Instr_cnt" ,$pnum[0]);
		printf "\t";
		&print_one_indiv_cpu_ratio_pct("DTLB_miss", "Instr_cnt",$pnum[0]);
		print "\n";
	}
	printf "\n";
    }
    if ($ukonly) {
	print "\n\nSection: User TLB miss rate per Strand\n";
	print "--------------------------------------\n";

	print "StrandId\tITLB_miss  DTLB_miss\n";
	foreach $psr (@psr_list) {
		@pnum = split(/\t/, $psr);

        	print "$pnum[0]\t";

		&print_one_indiv_user_cpu_ratio_pct("ITLB_miss", "Instr_cnt" ,$pnum[0]);
		printf "\t";
		&print_one_indiv_user_cpu_ratio_pct("DTLB_miss", "Instr_cnt",$pnum[0]);
		print "\n";
	}

        print "\n\nSection: Kernel TLB miss rate per Strand\n";
	print "----------------------------------------\n";

	print "StrandId\tITLB_miss  DTLB_miss\n";
	foreach $psr (@psr_list) {
    		@pnum = split(/\t/, $psr);

        	print "$pnum[0]\t";

		&print_one_indiv_kernel_cpu_ratio_pct("ITLB_miss", "Instr_cnt" ,$pnum[0]);
		printf "\t";
		&print_one_indiv_kernel_cpu_ratio_pct("DTLB_miss", "Instr_cnt",$pnum[0]);
		print "\n";
	}

	print "\n\nSection: Hypervisor TLB miss rate per Strand\n";
	print "--------------------------------------------\n";

	print "StrandId\tITLB_miss  DTLB_miss\n";
	foreach $psr (@psr_list) {
		@pnum = split(/\t/, $psr);

		print "$pnum[0]\t";

		&print_one_indiv_hpriv_cpu_ratio_pct("ITLB_miss", "Instr_cnt" ,$pnum[0]);
		printf "\t";
		&print_one_indiv_hpriv_cpu_ratio_pct("DTLB_miss", "Instr_cnt",$pnum[0]);
		print "\n";
	}
    }
}

sub print_cpu_tlb_percore_stats
{
	local($core, $key, $part_num, $ctr);

	print "\n\nSection: ITLB per Core \n";
	print "----------------------\n";

	print "CoreId";
	print "\tTotal" if ($cpuonly);
	print "\tUser\tKernel\tHpriv" if ($ukonly);

	foreach $ind (sort(keys %cpu_percore)) {
            ($core,$ctr) = split(",",$ind);

            if ($ctr eq "ITLB_miss") {
		print "\n$core\t";
		&print_one_indiv_core_ratio_pct("ITLB_miss", "Instr_cnt" ,$core) if ($cpuonly);
		if ($ukonly) {
			printf "\t";
			&print_one_indiv_user_core_ratio_pct("ITLB_miss", "Instr_cnt" ,$core);
			printf "\t";
			&print_one_indiv_kernel_core_ratio_pct("ITLB_miss", "Instr_cnt" ,$core);
			printf "\t";
			&print_one_indiv_hpriv_core_ratio_pct("ITLB_miss", "Instr_cnt" ,$core);
		}
            }
	}

	print "\n\nSection: DTLB per Core \n";
	print "----------------------\n";

	print "CoreId";
	print "\tTotal" if ($cpuonly);
	print "\tUser\tKernel\tHpriv" if ($ukonly);

	foreach $ind (sort(keys %cpu_percore)) {
		($core,$ctr) = split(",",$ind);

		if ($ctr eq "DTLB_miss") {
			print "\n$core\t";
			&print_one_indiv_core_ratio_pct("DTLB_miss", "Instr_cnt" ,$core) if ($cpuonly);
			if ($ukonly) {
				printf "\t";
				&print_one_indiv_user_core_ratio_pct("DTLB_miss", "Instr_cnt" ,$core);
				printf "\t";
				&print_one_indiv_kernel_core_ratio_pct("DTLB_miss", "Instr_cnt" ,$core);
				printf "\t";
				&print_one_indiv_hpriv_core_ratio_pct("DTLB_miss", "Instr_cnt" ,$core);
			}
		}
	}

        print "\n\nSection: ITLB HWTW ref L2 per Core \n";
        print "----------------------------------\n";

        print "CoreId";
        print "\tTotal" if ($cpuonly);
        print "\tUser\tKernel\tHpriv" if ($ukonly);

        foreach $ind (sort(keys %cpu_percore)) {
                ($core,$ctr) = split(",",$ind);

                if ($ctr eq "ITLB_HWTW_ref_L2") {
                        print "\n$core\t";
                        &print_one_indiv_core_ratio_pct("ITLB_HWTW_ref_L2", "Instr_cnt" ,$core) if ($cpuonly);
                	if ($ukonly) {
				printf "\t";
				&print_one_indiv_user_core_ratio_pct("ITLB_HWTW_ref_L2", "Instr_cnt" ,$core);
				printf "\t";
                        	&print_one_indiv_kernel_core_ratio_pct("ITLB_HWTW_ref_L2", "Instr_cnt" ,$core);
				printf "\t";
				&print_one_indiv_hpriv_core_ratio_pct("ITLB_HWTW_ref_L2", "Instr_cnt" ,$core);
			}
		 }
        }

        print "\n\nSection: ITLB HWTW miss L2 per Core \n";
        print "-----------------------------------\n";

        print "CoreId";
        print "\tTotal" if ($cpuonly);
        print "\tUser\tKernel\tHpriv" if ($ukonly);

        foreach $ind (sort(keys %cpu_percore)) {
                ($core,$ctr) = split(",",$ind);

                if ($ctr eq "ITLB_HWTW_miss_L2") {
                        print "\n$core\t";
                        &print_one_indiv_core_ratio_pct("ITLB_HWTW_miss_L2", "Instr_cnt" ,$core) if ($cpuonly);
                	if ($ukonly) {
				printf "\t";
				&print_one_indiv_user_core_ratio_pct("ITLB_HWTW_miss_L2", "Instr_cnt" ,$core);
				printf "\t";
                        	&print_one_indiv_kernel_core_ratio_pct("ITLB_HWTW_miss_L2", "Instr_cnt" ,$core);
				printf "\t";
				&print_one_indiv_hpriv_core_ratio_pct("ITLB_HWTW_miss_L2", "Instr_cnt" ,$core);
			}
		 }
        }

        print "\n\nSection: DTLB HWTW ref L2 per Core \n";
        print "----------------------------------\n";

        print "CoreId";
        print "\tTotal" if ($cpuonly);
        print "\tUser\tKernel\tHpriv" if ($ukonly);

        foreach $ind (sort(keys %cpu_percore)) {
                ($core,$ctr) = split(",",$ind);

                if ($ctr eq "DTLB_HWTW_ref_L2") {
                        print "\n$core\t";
                        &print_one_indiv_core_ratio_pct("DTLB_HWTW_ref_L2", "Instr_cnt" ,$core) if ($cpuonly);
                        if ($ukonly) {
				printf "\t";
                                &print_one_indiv_user_core_ratio_pct("DTLB_HWTW_ref_L2", "Instr_cnt" ,$core);
				printf "\t";
                                &print_one_indiv_kernel_core_ratio_pct("DTLB_HWTW_ref_L2", "Instr_cnt" ,$core);
				printf "\t";
                                &print_one_indiv_hpriv_core_ratio_pct("DTLB_HWTW_ref_L2", "Instr_cnt" ,$core);
			}
                }
        }

        print "\n\nSection: DTLB HWTW miss L2 per Core \n";
        print "-----------------------------------\n";

        print "CoreId";
        print "\tTotal" if ($cpuonly);
        print "\tUser\tKernel\tHpriv" if ($ukonly);

        foreach $ind (sort(keys %cpu_percore)) {
                ($core,$ctr) = split(",",$ind);

                if ($ctr eq "DTLB_HWTW_miss_L2") {
                        print "\n$core\t";
                        &print_one_indiv_core_ratio_pct("DTLB_HWTW_miss_L2", "Instr_cnt" ,$core) if ($cpuonly);
                        if ($ukonly) {
				printf "\t";
                                &print_one_indiv_user_core_ratio_pct("DTLB_HWTW_miss_L2", "Instr_cnt" ,$core);
				printf "\t";
                                &print_one_indiv_kernel_core_ratio_pct("DTLB_HWTW_miss_L2", "Instr_cnt" ,$core);
				printf "\t";
                                &print_one_indiv_hpriv_core_ratio_pct("DTLB_HWTW_miss_L2", "Instr_cnt" ,$core);
			}
                }
        }

}

sub print_cpu_cache_stats
{
 	print "\n\nSection: Level 1 cache miss rate (%)\n";
	print "------------------------------------\n";
	printf "\n";

	print "Stat";
	print "\t\tTotal" if ($cpuonly);
	print "\t\tUser\t\tKernel\t\tHpriv" if ($ukonly);

	print "\nIcMiss\t\t";
	&print_one_cpu_ratio_pct("IC_miss", "Instr_cnt") if ($cpuonly);
	if ($ukonly) {
            print "\t";
            &print_one_user_cpu_ratio_pct("IC_miss", "Instr_cnt");
            print "\t";
            &print_one_kernel_cpu_ratio_pct("IC_miss", "Instr_cnt");
            print "\t";
            &print_one_hpriv_cpu_ratio_pct("IC_miss", "Instr_cnt");
	}

        print "\nDcMiss\t\t";
	&print_one_cpu_ratio_pct("DC_miss", "Instr_cnt") if ($cpuonly);
        if ($ukonly) {
            print "\t";
            &print_one_user_cpu_ratio_pct("DC_miss", "Instr_cnt");
            print "\t";
            &print_one_kernel_cpu_ratio_pct("DC_miss", "Instr_cnt");
            print "\t";
            &print_one_hpriv_cpu_ratio_pct("DC_miss", "Instr_cnt");
        }


        printf "\n";
	print "\nSection: Level 2 cache miss rate (%)\n";
	print "------------------------------------\n";
	printf "\n";

	print "Stat";
	print "\t\tTotal" if ($cpuonly);
	print "\t\tUser\t\tKernel\t\tHpriv" if ($ukonly);


        print "\nL2_IC_Miss\t";
        &print_one_cpu_ratio_pct("L2_imiss", "Instr_cnt") if ($cpuonly);
        if ($ukonly) {
            print "\t";
            &print_one_user_cpu_ratio_pct("L2_imiss", "Instr_cnt");
            print "\t";
            &print_one_kernel_cpu_ratio_pct("L2_imiss", "Instr_cnt");
            print "\t";
            &print_one_hpriv_cpu_ratio_pct("L2_imiss", "Instr_cnt");
        }

        print "\nL2_DC_Miss\t";
        &print_one_cpu_ratio_pct("L2_dmiss_ld", "Instr_cnt") if ($cpuonly);
        if ($ukonly) {
            print "\t";
            &print_one_user_cpu_ratio_pct("L2_dmiss_ld", "Instr_cnt");
            print "\t";
            &print_one_kernel_cpu_ratio_pct("L2_dmiss_ld", "Instr_cnt");
            print "\t";
            &print_one_hpriv_cpu_ratio_pct("L2_dmiss_ld", "Instr_cnt");
        }
}

sub print_cpu_cache_percore_stats
{
 	local($core, $key, $part_num, $ctr);

	print "\nSection: IC_Miss per Core \n";
	print "-------------------------\n";

	print "CoreId";
	print "\tTotal" if ($cpuonly);
	print "\tUser\tKernel\tHpriv" if ($ukonly);

	foreach $ind (sort(keys %cpu_percore)) {
            ($core,$ctr) = split(",",$ind);

            if ($ctr eq "IC_miss") {
		print "\n$core\t";
		&print_one_indiv_core_ratio_pct("IC_miss", "Instr_cnt" ,$core) if ($cpuonly);
		if ($ukonly) {
			printf "\t";
			&print_one_indiv_user_core_ratio_pct("IC_miss", "Instr_cnt" ,$core);
			printf "\t";
			&print_one_indiv_kernel_core_ratio_pct("IC_miss", "Instr_cnt" ,$core);
			printf "\t";
			&print_one_indiv_hpriv_core_ratio_pct("IC_miss", "Instr_cnt" ,$core);
		}
            }
	}

	print "\n\nSection: DC_Miss per Core \n";
	print "-------------------------\n";

	print "CoreId";
	print "\tTotal" if ($cpuonly);
	print "\tUser\tKernel\tHpriv" if ($ukonly);

	foreach $ind (sort(keys %cpu_percore)) {
            ($core,$ctr) = split(",",$ind);

            if ($ctr eq "DC_miss") {
		print "\n$core\t";
		&print_one_indiv_core_ratio_pct("DC_miss", "Instr_cnt" ,$core) if ($cpuonly);
		if ($ukonly) {
			printf "\t";
			&print_one_indiv_user_core_ratio_pct("DC_miss", "Instr_cnt" ,$core);
			printf "\t";
			&print_one_indiv_kernel_core_ratio_pct("DC_miss", "Instr_cnt" ,$core);
			printf "\t";
			&print_one_indiv_hpriv_core_ratio_pct("DC_miss", "Instr_cnt" ,$core);
		}
            }
	}

	print "\n\nSection: L2_IC_Miss per Core \n";
	print "----------------------------\n";

	print "CoreId";
	print "\tTotal" if ($cpuonly);
	print "\tUser\tKernel\tHpriv" if ($ukonly);

	foreach $ind (sort(keys %cpu_percore)) {
            ($core,$ctr) = split(",",$ind);

            if ($ctr eq "L2_imiss") {
		print "\n$core\t";
		&print_one_indiv_core_ratio_pct("L2_imiss", "Instr_cnt" ,$core) if ($cpuonly);
		if ($ukonly) {
			printf "\t";
			&print_one_indiv_user_core_ratio_pct("L2_imiss", "Instr_cnt" ,$core);
			printf "\t";
			&print_one_indiv_kernel_core_ratio_pct("L2_imiss", "Instr_cnt" ,$core);
			printf "\t";
			&print_one_indiv_hpriv_core_ratio_pct("L2_imiss", "Instr_cnt" ,$core);
		}
            }
	}

	print "\n\nSection: L2_DC_Miss per Core \n";
	print "----------------------------\n";

	print "CoreId";
	print "\tTotal" if ($cpuonly);
	print "\tUser\tKernel\tHpriv" if ($ukonly);

	foreach $ind (sort(keys %cpu_percore)) {
            ($core,$ctr) = split(",",$ind);

            if ($ctr eq "L2_dmiss_ld") {
		print "\n$core\t";
		&print_one_indiv_core_ratio_pct("L2_dmiss_ld", "Instr_cnt" ,$core) if ($cpuonly);
		if ($ukonly) {
			printf "\t";
			&print_one_indiv_user_core_ratio_pct("L2_dmiss_ld", "Instr_cnt" ,$core);
			printf "\t";
			&print_one_indiv_kernel_core_ratio_pct("L2_dmiss_ld", "Instr_cnt" ,$core);
			printf "\t";
			&print_one_indiv_hpriv_core_ratio_pct("L2_dmiss_ld", "Instr_cnt" ,$core);
		}
            }
	}
}

sub print_one_cpu_ratio_tab
{
	local ($ctr1, $ctr2) = ($_[0], $_[1]);

        #print "$cpu_total{$ctr1}, $cpu_total{$ctr2} \n";  

	if (defined $cpu_total{$ctr1} && defined $cpu_total{$ctr2} && 
	    $cpu_total{$ctr2} != 0 ) {
		printf("%.3f	", $cpu_total{$ctr1}/$cpu_total{$ctr2});
	} else { printf(" empty  "); }
}

sub print_one_user_cpu_ratio_tab
{
	local ($ctr1, $ctr2) = ($_[0], $_[1]);

       # print "$user_cpu_total{$ctr1}, $user_cpu_total{ctr2} \n";  

	if (defined $user_cpu_total{$ctr1} && defined $user_cpu_total{$ctr2} && 
	    $user_cpu_total{$ctr2} != 0 ) {
		printf("%.3f	", $user_cpu_total{$ctr1}/$user_cpu_total{$ctr2});
	} else { printf(" empty  "); }
}

sub print_one_kernel_cpu_ratio_tab
{
	local ($ctr1, $ctr2) = ($_[0], $_[1]);

       # print "$kernel_cpu_total{$ctr1}, $kernel_cpu_total{$ctr2} \n";

	if (defined $kernel_cpu_total{$ctr1} && defined $kernel_cpu_total{$ctr2} && 
	    $kernel_cpu_total{$ctr2} != 0 ) {
		printf("%.3f	", $kernel_cpu_total{$ctr1}/$kernel_cpu_total{$ctr2});
	} else { printf(" empty  "); }
}

sub print_one_cpu_ratio_pct
{
	local ($ctr1, $ctr2) = ($_[0], $_[1]);

	if (defined $cpu_total{$ctr1} && defined $cpu_total{$ctr2} && 
	    $cpu_total{$ctr2} != 0 ) {
		printf("%.2f%%	", $cpu_total{$ctr1}/$cpu_total{$ctr2}* 100);
	} else { return; }
}

sub print_one_user_cpu_ratio_pct
{
	local ($ctr1, $ctr2) = ($_[0], $_[1]);

	if (defined $user_cpu_total{$ctr1} && defined $user_cpu_total{$ctr2} && 
	    $user_cpu_total{$ctr2} != 0 ) {
		printf("%.2f%%	", $user_cpu_total{$ctr1}/$user_cpu_total{$ctr2}* 100);
	} else { return; }
}

sub print_one_kernel_cpu_ratio_pct
{
	local ($ctr1, $ctr2) = ($_[0], $_[1]);

	if (defined $kernel_cpu_total{$ctr1} && defined $kernel_cpu_total{$ctr2} && 
	    $kernel_cpu_total{$ctr2} != 0 ) {
		printf("%.2f%%	", $kernel_cpu_total{$ctr1}/$kernel_cpu_total{$ctr2}* 100);
	} else { return; }
}

sub print_one_hpriv_cpu_ratio_pct
{
	local ($ctr1, $ctr2) = ($_[0], $_[1]);

	if (defined $hpriv_cpu_total{$ctr1} && defined $hpriv_cpu_total{$ctr2} &&
            $hpriv_cpu_total{$ctr2} != 0 ) {
		printf("%.2f%%	", $hpriv_cpu_total{$ctr1}/$hpriv_cpu_total{$ctr2}* 100);
	} else { return; }
}

sub print_one_indiv_cpu_ratio_pct
{
        local ($ctr1, $ctr2, $part_num) = ($_[0], $_[1], $_[2]);

	if ($cpu_per_part_num{$part_num.",".$ctr2} != 0) {
		printf("%.2f%%", $cpu_per_part_num{$part_num.",".$ctr1}/$cpu_per_part_num{$part_num.",".$ctr2} * 100);
	} else { return; }

}

sub print_one_indiv_user_cpu_ratio_pct
{

        local ($ctr1, $ctr2, $part_num) = ($_[0], $_[1], $_[2]);
	local ($core, $key1, $key2);


	if ($user_per_part_num{$part_num.",".$ctr2} != 0) {
		printf("%.2f%%", $user_per_part_num{$part_num.",".$ctr1}/$user_per_part_num{$part_num.",".$ctr2} * 100);
	} else { return; }
}

sub print_one_indiv_kernel_cpu_ratio_pct
{

        local ($ctr1, $ctr2, $part_num) = ($_[0], $_[1], $_[2]);
    	local ($core, $key1, $key2);


	if ($kernel_per_part_num{$part_num.",".$ctr2} != 0) {
    		printf("%.2f%%", $kernel_per_part_num{$part_num.",".$ctr1}/$kernel_per_part_num{$part_num.",".$ctr2} * 100);
    	} else { return; }
}

sub print_one_indiv_hpriv_cpu_ratio_pct
{

	local ($ctr1, $ctr2, $part_num) = ($_[0], $_[1], $_[2]);
	local ($core, $key1, $key2);


        if ($hpriv_per_part_num{$part_num.",".$ctr2} != 0) {
		printf("%.2f%%", $hpriv_per_part_num{$part_num.",".$ctr1}/$hpriv_per_part_num{$part_num.",".$ctr2} * 100);
	} else { return; }
}

sub usage
{
	print "
	usage	: $0 [-i <infile>] [-o <outfile>] [-v] [<infile>]
	-i <file>: input file name
	-o <file>: output file name
	-uk	: Print CPU user and kernel hpriv related data
        -v	: Turn on verbose 
	
	-cpu	: print only CPU related data
	-exp	: print Per Strand statistics \n";

	exit 1;
}

sub print_one_indiv_core_ratio_pct
{
        local ($ctr1, $ctr2, $core) = ($_[0], $_[1], $_[2]);

	if ($cpu_percore{$core.",".$ctr2} != 0) {
                printf("%.2f%%", $cpu_percore{$core.",".$ctr1}/$cpu_percore{$core.",".$ctr2} * 100);
        } else { return; }

}

sub print_one_indiv_user_core_ratio_pct
{

        local ($ctr1, $ctr2, $core) = ($_[0], $_[1], $_[2]);

	if ($user_cpu_percore{$core.",".$ctr2} != 0) {
                printf("%.2f%%", $user_cpu_percore{$core.",".$ctr1}/$user_cpu_percore{$core.",".$ctr2} * 100);
        } else { return; }
}

sub print_one_indiv_kernel_core_ratio_pct
{

        local ($ctr1, $ctr2, $core) = ($_[0], $_[1], $_[2]);

	if ($kernel_cpu_percore{$core.",".$ctr2} != 0) {
                printf("%.2f%%", $kernel_cpu_percore{$core.",".$ctr1}/$kernel_cpu_percore{$core.",".$ctr2} * 100);
        } else { return; }
}

sub print_one_indiv_hpriv_core_ratio_pct
{

	local ($ctr1, $ctr2, $core) = ($_[0], $_[1], $_[2]);

        if ($hpriv_cpu_percore{$core.",".$ctr2} != 0) {
		printf("%.2f%%", $hpriv_cpu_percore{$core.",".$ctr1}/$hpriv_cpu_percore{$core.",".$ctr2} * 100);
	} else { return; }
}
