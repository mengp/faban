#!/usr/bin/perl

# Tunables

$debug = 0;
$CpuExp = 5;
$SysioExp = 5;
$AcExp = 8;
$SSMNodes = 4;
$MC_CAP = 8.33;
$MC_BDCAP = 11.9;

# Get options 

if ($#ARGV == -1) {&usage();}

while ($#ARGV > -1) {
	$arg = shift @ARGV;
	if ( $arg =~ /^-(.)(.*)$/ ) {
		$flag=$1; $val=$2;
		$flag2=$flag.$val;
		if ( $flag eq "i" ) {
			if ( $val eq "" ) { $val = shift @ARGV;}
			if ( $val eq "" ) { &usage();}
			$infile = $val;
		} elsif ($flag eq "o") {
			if ( $val eq "" ) { $val = shift @ARGV;}
			if ( $val eq "" ) { &usage();}
			$outfile = $val;
		} elsif ($flag eq "v") {
			if ( $val ne "")  { &usage();}
			$verbose = 1;
		} elsif ($flag2 eq "ac") {
			$aconly = 1;
		} elsif ($flag2 eq "sysio") {
			$sysioonly = 1;
		} elsif ($flag2 eq "cpu") {
			$cpuonly = 1;
		} elsif ($flag2 eq "uk") {
			$ukonly = 1;
		} elsif ($flag2 eq "wfi") {
			$wfionly = 1;
		} elsif ($flag2 eq "avg") {
			$avgonly = 1;
		} elsif ($flag2 eq "eavg") {
			$eavgonly = 1;
		} else { &usage(); }
	} elsif ( $arg =~ /^(.*)$/ ) {
		$infile = $1;
	}
}

# if no flags are set or if verbose flag is set  then  set all flags.

if ( !($aconly || $sysioonly || $cpuonly || $wfionly || $avgonly || $eavgonly) || $verbose ) {
	$aconly = $sysioonly = $cpuonly = $wfionly =$avgonly = $eavgonly = 1;
}

$eavgonly=0;
$avgonly=0;

if (defined $infile) {
	open(STDIN, "<$infile") || die "Could not open $infile\n";
}

if (defined $outfile) {
	open(STDOUT, ">$outfile") || die "Could not open $outfile\n";
}


$word = "[a-zA-Z,=0-9_-]+";
$smallword = "[a-zA-Z]+";
$num = "[0-9]+";
$dec = "[0-9]+\.[0-9]+|[0-9]+|\.[0-9]+|[0-9]+\.";
$time = 0;
#   $total_tx = `grep "Total number of transactions" summary 2>/dev/null | awk '{print \$6}'`;
#   $runtime = `grep "^Run-time" summary 2>/dev/null | awk '{print \$3}'`;
#   if ($runtime > 0 && $total_tx > 0 ) {
#   $tps = $total_tx/$runtime  || die "Could not open summary\n";
#   }
#@psr_list = `grep since report|grep -v off-line`;
#@psr_list =  (0,1,2,3,32,33,34,35);
@psr_list = `grep -v total $infile |nawk 'NR > 1 {print \$2"\t"}' |sort -n |uniq`;
if ($debug) {
	print   
	"
	Assumptions:
	The counts are in millions and not mill/sec or percents
	Process ID in the output ignored.
	", 2 ** $CpuExp," processors per SSM node.
	", 2 ** $SysioExp," I/O boards per SSM node.
	", 2 ** $AcExp," address controllers per SSM node.

";
	print "X" x 80,"\n";
	print "The following lines in the input were ignored\n";
	print "X" x 80,"\n";
}

# ++++++++++++++changed by ZYF(cpustat)
while ($line = <STDIN>) {
	chop $line;
	if ( $line =~ /^\s*($dec)\s*($num)\s*($smallword)\s*($num)\s*($num)\s*\x23\s*($word)\s*$/ ){
	#if ( $line =~ /^($dec)\s*($num)\s*($smallword)\s*($num)\s*($num)\s*($word)\s*$/ ){

                #print " $1,  $2, $3, $4, $5, $6 \n";
                if ( $time == 0 ) { $time = $1;}
                if (  $3 =~/exit/ || $3 =~/total/ ) { last;}
                $ctr_set = "cpu";
                $instance = $2;
                $cnt_a = ($4/1000000);
                @list=split(",",$6);
                @a=split("=",$list[0]);
                @b=split("=",$list[1]);
                $mode=$list[2];

		if ($b[0] eq "sys") 
		{ $mode= "sys";
		  @b=split("=",$list[2]);}
		elsif ($b[0] eq "nouser") 
		{ $mode= "nouser";
		  @b=split("=",$list[3]);}

                $ctr_a = $a[1];
                $ctr_b = $b[1];
#		print "$list[0]  $list[1] $list[2] $list[3] $list[4] $a[0] $a[1] $b[0] $b[1]\n";
                if ($mode eq "")
                  {$mode = "u";}
                if ($mode eq "sys")
                  {$mode = "uk";}
                if ($mode eq "nouser")
                  {$mode = "k";}
                $cnt_b = ($5/1000000);
                $hash_a = join(",", ("cpu",$2,$mode, $ctr_a));
                $hash_b = join(",", ("cpu",$2,$mode, $ctr_b));
                $time{$hash_a} += $time;
                $count{$hash_a} += $cnt_a;
                $time{$hash_b} += $time;
                $count{$hash_b} += $cnt_b;

		#print "$cnt_a $cnt_b $mode $time $hash_a $hash_b $time{$hash_a} $count{$hash_a} $time{$hash_b} $count{$hash_b} \n";
        
        }else {}  

}
# ++++++++++++++changed by ZYF(cpustat)

if ($debug) { print "X" x 80,"\n";}

foreach $ind (keys %time) {
	($ctr_set, $part_num, $mode, $ctr) = split(",",$ind);
	$persec{$ind} = $count{$ind}/$time{$ind};

	if ($ctr_set eq "cpu" && $mode eq "uk") {
		$cpu_total{$ctr} += $persec{$ind};
		$cpu_total_count{$ctr} += 1;
		$node = $part_num >> $CpuExp;
		$cpu_pernode{$node.",".$ctr} += $persec{$ind};
		$cpu_pernode_count{$node.",".$ctr} += 1;
		$cpu_per_part_num{$part_num.",".$ctr} += $persec{$ind};
                $cpu_per_part_num_count{$part_num.",".$ctr} += 1;

	}

	if ($ctr_set eq "cpu" && $mode eq "u") {
		$user_cpu_total{$ctr} += $persec{$ind};
		$user_cpu_total_count{$ctr} += 1;
		$node = $part_num >> $CpuExp;
		$user_cpu_pernode{$node.",".$ctr} += $persec{$ind};
		$user_cpu_pernode_count{$node.",".$ctr} += 1;
		$user_per_part_num{$part_num.",".$ctr} += $persec{$ind};
                $user_per_part_num_count{$part_num.",".$ctr} += 1;
       #         print "$ctr, $user_cpu_total{$ctr} \n";
	}

	if ($ctr_set eq "cpu" && $mode eq "k") {
		$kernel_cpu_total{$ctr} += $persec{$ind};
		$kernel_cpu_total_count{$ctr} += 1;
		$node = $part_num >> $CpuExp;
		$kernel_cpu_pernode{$node.",".$ctr} += $persec{$ind};
		$kernel_cpu_pernode_count{$node.",".$ctr} += 1;
		$kernel_per_part_num{$part_num.",".$ctr} += $persec{$ind};
                $kernel_per_part_num_count{$part_num.",".$ctr} += 1;
	}


	if ($ctr_set eq "AC" || $ctr_set eq "ac") {
		$ac_total{$ctr} += $persec{$ind};
		$ac_total_count{$ctr} += 1;
		$node = $part_num >> $AcExp;
		$ac_pernode{$node.",".$ctr} += $persec{$ind};
		$ac_pernode_count{$node.",".$ctr} += 1;
	}
}

# Start producing output
print "Title:cpustat\n";

&print_processor_stats();
&print_core_mips();
&print_thread_mips();
exit;


if ($eavgonly) {
	&print_event_averages();
	print "\n";
}

if ($avgonly) {
	&print_all_averages();
}

if ($cpuonly) {
	printf "CPU statistics\n";
	printf "--------------\n";
	&print_cpu_mips();
	printf "\n";
	&print_cpu_cache_stats();
	printf "\n";
	&print_cpu_tlb_breakdown();
	printf "\n";
#	&print_cpu_SB_breakdown();
	printf "\n";
	&print_cpu_fp_breakdown();
	printf "\n";
	printf "\n";
}

if ($ukonly) {
	printf "CPU user mode statistics\n";
	printf "------------------------\n";
	&user_print_cpu_mips();
	printf "\n";
	&user_print_cpu_cache_stats();
	printf "\n";
	&user_print_cpu_tlb_breakdown();
	printf "\n";
#	&user_print_cpu_SB_breakdown();
	printf "\n";
	&user_print_cpu_fp_breakdown();
	printf "\n";
	printf "CPU kernel mode statistics\n";
	printf "--------------------------\n";
	&kernel_print_cpu_mips();
	printf "\n";
	&kernel_print_cpu_cache_stats();
	printf "\n";
	&kernel_print_cpu_tlb_breakdown();
	printf "\n";
#	&kernel_print_cpu_SB_breakdown();
	printf "\n";
	&kernel_print_cpu_fp_breakdown();
	printf "\n";
	printf "\n";
}

if ($aconly) {
	print "\n";
	printf "Memory Banks Statistics\n";
	printf "-----------------------\n";
	&print_ALL_ac_membank_stats();
	print "\n";
}

sub print_processor_stats
{
	print "\nSection: Overall Processor Stats (per 100 instr)\n";
	print "--------------------------------\n";
	print "Stat\t\tTotal\tUser\tKernel\n";
	printf "MIPS\t\t%d\t%d\t%d\n", $cpu_total{"Instr_cnt"}, 
		$user_cpu_total{"Instr_cnt"}, $kernel_cpu_total{"Instr_cnt"};

	&print_stat('FP Instr');
	&print_stat('Ic Miss');
	&print_stat('Dc Miss');
	&print_stat('L2 I Miss');
	&print_stat('L2 D Miss');
	&print_stat('iTLB');	
	&print_stat('dTLB');	
}

sub print_event_averages
{
	local ($ctr);

	print "Event_Name #events/sec #instances #events/sec/instance\n";
	
	#print "CPU\n";
	print "\n";
	foreach $ctr (sort (keys %cpu_total)) {
		printf("%s %.4f %d %.4f\n",
							$ctr,
							$cpu_total{$ctr},
							$cpu_total_count{$ctr},
							$cpu_total{$ctr}/$cpu_total_count{$ctr});
	}
	#print "AC\n";
	print "\n";
	foreach $ctr (sort (keys %ac_total)) {
		printf("%s %.4f %d %.4f\n",
							$ctr,
							$ac_total{$ctr},
							$ac_total_count{$ctr},
							$ac_total{$ctr}/$ac_total_count{$ctr});
	}
	#print "SYSIO\n";
	print "\n";
	foreach $ctr (sort (keys %sysio_total)) {
		printf("%s %.4f %d %.4f\n",
							$ctr,
							$sysio_total{$ctr},
							$sysio_total_count{$ctr},
							$sysio_total{$ctr}/$sysio_total_count{$ctr});
	}
	#print "WFI\n";
	print "\n";
	foreach $ctr (sort (keys %wfi_total)) {
		printf("%s %.4f %d %.4f\n",
							$ctr,
							$wfi_total{$ctr},
							$wfi_total_count{$ctr},
							$wfi_total{$ctr}/$wfi_total_count{$ctr});
	}
}

sub print_all_averages 
{
	local ($before, %part_name, $key, $ctr_set, $part_num, $mode, $ctr);
	$before = "none";
	print "Event_name #events/sec Instance_Type Instance_number\n";
	foreach $key (sort mycmp (keys %time)) {
		($ctr_set, $part_num, $ctr) = split(",",$key);
		if ( $before ne $ctr_set ) { print "\n";}
		printf("%s %.4f %s %d\n",
					$ctr,
					$persec{$key},
					$ctr_set,
					$part_num);
		$before = $ctr_set;
	}
}



sub mycmp 
{
	($ctr_set_a, $part_num_a, $mode_a, $ctr_a) = split(",", $a);
	($ctr_set_b, $part_num_b, $mode_b, $ctr_b) = split(",", $b);

	$ctr_set_a cmp $ctr_set_b ||
	$part_num_a <=> $part_num_b ||
	$ctr_a cmp $ctr_b;
}



sub print_core_mips
{
	foreach $ind (keys %cpu_per_part_num) {

	  ($part_num,$ctr) = split(",",$ind);
	  next if $ctr ne 'Instr_cnt';
	  $coreNum = int($part_num / 4);

	  $mips[$coreNum] += $cpu_per_part_num{$ind};
	  $usermips[$coreNum] += $user_per_part_num{$ind};
	  $kernelmips[$coreNum] += $kernel_per_part_num{$ind};
	}

	print "\nSection: Core MIPS\n";
	print "---------\n";
	print "Core\tTotal\tUser\tKernel\n";

	for ($coreNum = 0; $coreNum < 8; $coreNum++) {
	  printf "%d\t%d\t%d\t%d\n", $coreNum, $mips[$coreNum],
	    $usermips[$coreNum], $kernelmips[$coreNum];
	}
}

sub print_thread_mips
{
	print "\nSection: Thread MIPS\n";
	print "---------\n";
	print "Thread\tTotal\tUser\tKernel\n";

	foreach $key (keys %cpu_per_part_num) {
	  next unless $key =~ /Instr_cnt/;

	  $key =~ s/,Instr_cnt//;
	  push(@threads, $key);
	}

	@threads = sort {$a <=> $b} @threads;


	foreach $ind (@threads) {
	  $ind .= ',Instr_cnt';

	  printf "%d\t%d\t%d\t%d\n", $ind, $cpu_per_part_num{$ind}, 
	    $user_per_part_num{$ind}, $kernel_per_part_num{$ind};
	}
  
}


sub print_stat
{
	($label) = @_;

	%stat = ( 
			'FP Instr' => 'FP_instr_cnt',
			'Ic Miss' => 'IC_miss',
			'Dc Miss' => 'DC_miss',
			'L2 I Miss' => 'L2_imiss',
			'L2 D Miss' => 'L2_dmiss_ld',
			'iTLB' => 'ITLB_miss',
			'dTLB' => 'DTLB_miss'
		);
	
	printf "%-10s\t", $label;

        if ( $cpu_total{"Instr_cnt"} != 0 ) {
		printf("%.4f\t",
                        ($cpu_total{$stat{$label}} * 100 ) /
			$cpu_total{"Instr_cnt"});
        }  else { printf("empty\t"); }

        if ( $user_cpu_total{"Instr_cnt"} != 0 ) {
		printf("%.4f\t",
                        ($user_cpu_total{$stat{$label}} * 100 ) /
			$user_cpu_total{"Instr_cnt"});
        }  else { printf("empty\t"); }

       if ( $kernel_cpu_total{"Instr_cnt"} != 0 ) {
		printf("%.4f",
                        ($kernel_cpu_total{$stat{$label}} * 100 ) /
			$kernel_cpu_total{"Instr_cnt"});
        }  else { printf("empty"); }

	printf "\n";
}



sub print_one_cpu_ratio_tab
{
	local ($ctr1, $ctr2) = ($_[0], $_[1]);
	local ($node, $key1, $key2);
        #print "$cpu_total{$ctr1}, $cpu_total{$ctr2} \n";  
	if (defined $cpu_total{$ctr1} && defined $cpu_total{$ctr2} && 
	    $cpu_total{$ctr2} != 0 ) {
		printf("%.3f	", $cpu_total{$ctr1}/$cpu_total{$ctr2});
	} else { printf(" empty  "); }
}

sub print_one_user_cpu_ratio_tab
{
	local ($ctr1, $ctr2) = ($_[0], $_[1]);
	local ($node, $key1, $key2);
       # print "$ctr1, ctr2 \n";  

	if (defined $user_cpu_total{$ctr1} && defined $user_cpu_total{$ctr2} && 
	    $user_cpu_total{$ctr2} != 0 ) {
		printf("%.3f	", $user_cpu_total{$ctr1}/$user_cpu_total{$ctr2});
	} else { printf(" empty  "); }
}

sub print_one_kernel_cpu_ratio_tab
{
	local ($ctr1, $ctr2) = ($_[0], $_[1]);
	local ($node, $key1, $key2);
       # print "$kernel_cpu_total{Dispatch0_mispred}, $kernel_cpu_total{Instr_cnt} \n";
	if (defined $kernel_cpu_total{$ctr1} && defined $kernel_cpu_total{$ctr2} && 
	    $kernel_cpu_total{$ctr2} != 0 ) {
		printf("%.3f	", $kernel_cpu_total{$ctr1}/$kernel_cpu_total{$ctr2});
	} else { printf(" empty  "); }
}

sub print_one_cpu_ratio_pct
{
	local ($ctr1, $ctr2) = ($_[0], $_[1]);
	local ($node, $key1, $key2);

	if (defined $cpu_total{$ctr1} && defined $cpu_total{$ctr2} && 
	    $cpu_total{$ctr2} != 0 ) {
		printf("%.4f%%	", $cpu_total{$ctr1}/$cpu_total{$ctr2}* 100);
	} else { return; }
}

sub print_one_user_cpu_ratio_pct
{
	local ($ctr1, $ctr2) = ($_[0], $_[1]);
	local ($node, $key1, $key2);

	if (defined $user_cpu_total{$ctr1} && defined $user_cpu_total{$ctr2} && 
	    $user_cpu_total{$ctr2} != 0 ) {
		printf("%.4f%%	", $user_cpu_total{$ctr1}/$user_cpu_total{$ctr2}* 100);
	} else { return; }
}

sub print_one_kernel_cpu_ratio_pct
{
	local ($ctr1, $ctr2) = ($_[0], $_[1]);
	local ($node, $key1, $key2);

	if (defined $kernel_cpu_total{$ctr1} && defined $kernel_cpu_total{$ctr2} && 
	    $kernel_cpu_total{$ctr2} != 0 ) {
		printf("%.4f%%	", $kernel_cpu_total{$ctr1}/$kernel_cpu_total{$ctr2}* 100);
	} else { return; }
}


sub usage
{
	print "
	usage : $0 [-i <infile>] [-o <outfile>] [-v] [<infile>]
	-i <name>: input file name
	-o <name>: output file name
	-uk:  print CPU user and kernel related data
        -v : turn on verbose 
	
	-cpu   : print only CPU related data
	-ac    : print only AC related data
	-avg   : print only the per second counter values
	-eavg  : print only the per second event counts \n";

	exit 1;
}


sub print_one_indiv_cpu_ratio_tab
{
        local ($ctr1, $ctr2, $part_num) = ($_[0], $_[1], $_[2]);
        local ($node, $key1, $key2);
if ($cpu_per_part_num{$part_num.",".$ctr2} != 0) {
                printf("%.3f   ", $cpu_per_part_num{$part_num.",".$ctr1}/$cpu_per_part_num{$part_num.",".$ctr2});
        } else { return; }

}

sub print_one_indiv_user_cpu_ratio_tab
{

        local ($ctr1, $ctr2, $part_num) = ($_[0], $_[1], $_[2]);
        local ($node, $key1, $key2);


if ($user_per_part_num{$part_num.",".$ctr2} != 0) {
                printf("%.3f   ", $user_per_part_num{$part_num.",".$ctr1}/$user_per_part_num{$part_num.",".$ctr2});
        } else { return; }
}

sub print_one_indiv_kernel_cpu_ratio_tab
{

        local ($ctr1, $ctr2, $part_num) = ($_[0], $_[1], $_[2]);
        local ($node, $key1, $key2);


if ($kernel_per_part_num{$part_num.",".$ctr2} != 0) {
                printf("%.3f   ", $kernel_per_part_num{$part_num.",".$ctr1}/$kernel_per_part_num{$part_num.",".$ctr2});
        } else { return; }
}

